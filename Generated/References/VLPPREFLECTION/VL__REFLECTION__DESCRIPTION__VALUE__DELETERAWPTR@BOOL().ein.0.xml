<example><![CDATA[
 // reflectable C++ types
 
 namespace mynamespace
 {
     class SharedClass : public Object, public Description<SharedClass>
     {
     public:
         SharedClass()
         {
             Console::WriteLine(L"SharedClass::SharedClass()");
         }
 
         ~SharedClass()
         {
             Console::WriteLine(L"SharedClass::~SharedClass()");
         }
     };
 
     class RawClass : public Object, public Description<RawClass>
     {
     public:
         RawClass()
         {
             Console::WriteLine(L"RawClass::RawClass()");
         }
 
         ~RawClass()
         {
             Console::WriteLine(L"RawClass::~RawClass()");
         }
     };
 }
 
 #define MY_TYPELIST(F)\
     F(mynamespace::SharedClass)\
     F(mynamespace::RawClass)\
 
 // it is recommended to put the content below in a separated header file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             MY_TYPELIST(DECL_TYPE_INFO)
         }
     }
 }
 
 // it is recommended to put the content below in a separated cpp file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             using namespace mynamespace;
 
 #define _ ,
 
             MY_TYPELIST(IMPL_CPP_TYPE_INFO)
 
             BEGIN_CLASS_MEMBER(SharedClass)
                 CLASS_MEMBER_CONSTRUCTOR(Ptr<SharedClass>(), NO_PARAMETER)
             END_CLASS_MEMBER(SharedClass)
 
             BEGIN_CLASS_MEMBER(RawClass)
                 CLASS_MEMBER_CONSTRUCTOR(RawClass*(), NO_PARAMETER)
             END_CLASS_MEMBER(RawClass)
 
 #undef  _
         }
     }
 }
 
 class MyTypeLoader : public Object, public ITypeLoader
 {
 public:
     void Load(ITypeManager* manager)
     {
         MY_TYPELIST(ADD_TYPE_INFO)
     }
 
     void Unload(ITypeManager* manager)
     {
     }
 };
 
 // main function
 
 int main()
 {
     LoadPredefinedTypes();
     GetGlobalTypeManager()->AddTypeLoader(new MyTypeLoader);
     GetGlobalTypeManager()->Load();
     {
         auto sharedClass = Value::Create(L"mynamespace::SharedClass");
         auto rawClass = Value::Create(L"mynamespace::RawClass");
 
         Console::WriteLine(L"sharedClass is " + WString(sharedClass.GetValueType() == Value::SharedPtr ? L"SharedPtr" : L"RawPtr"));
         Console::WriteLine(L"rawClass is " + WString(rawClass.GetValueType() == Value::SharedPtr ? L"SharedPtr" : L"RawPtr"));
 
         rawClass.DeleteRawPtr();
     }
     DestroyGlobalTypeManager();
 }
 ]]></example>