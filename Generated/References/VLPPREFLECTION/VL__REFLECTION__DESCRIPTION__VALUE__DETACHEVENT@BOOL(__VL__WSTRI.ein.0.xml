<example><![CDATA[
 // reflectable C++ types
 
 namespace mynamespace
 {
     class MyClass : public Object, public Description<MyClass>
     {
     private:
         WString prop;
     public:
         Event<void(const WString&, const WString&)> PropChanged;
 
         WString GetProp()
         {
             return prop;
         }
 
         void SetProp(const WString& value)
         {
             if (prop != value)
             {
                 auto old = prop;
                 prop = value;
                 PropChanged(old, prop);
             }
         }
     };
 }
 
 #define MY_TYPELIST(F)\
     F(mynamespace::MyClass)\
 
 // it is recommended to put the content below in a separated header file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             MY_TYPELIST(DECL_TYPE_INFO)
         }
     }
 }
 
 // it is recommended to put the content below in a separated cpp file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             using namespace mynamespace;
 
 #define _ ,
 
             MY_TYPELIST(IMPL_CPP_TYPE_INFO)
 
             BEGIN_CLASS_MEMBER(MyClass)
                 CLASS_MEMBER_CONSTRUCTOR(Ptr<MyClass>(), NO_PARAMETER)
                 CLASS_MEMBER_EVENT(PropChanged)
                 CLASS_MEMBER_PROPERTY_EVENT_FAST(Prop, PropChanged)
             END_CLASS_MEMBER(MyClass)
 
 #undef  _
         }
     }
 }
 
 class MyTypeLoader : public Object, public ITypeLoader
 {
 public:
     void Load(ITypeManager* manager)
     {
         MY_TYPELIST(ADD_TYPE_INFO)
     }
 
     void Unload(ITypeManager* manager)
     {
     }
 };
 
 // main function
 
 int main()
 {
     LoadPredefinedTypes();
     GetGlobalTypeManager()->AddTypeLoader(new MyTypeLoader);
     GetGlobalTypeManager()->Load();
     {
         auto td = GetTypeDescriptor(L"mynamespace::MyClass");
         auto myClass = Value::Create(td);
         myClass.SetProperty(L"Prop", BoxValue<WString>(L"Zero"));
 
         using CallbackType = Func<void(const WString&, const WString&)>;
         CallbackType callbackFunction = [](const WString& oldProp, const WString& newProp)
         {
             Console::WriteLine(L"myClass.Prop changed: " + oldProp + L" -> " + newProp);
         };
         auto handler = myClass.AttachEvent(L"PropChanged", BoxParameter<CallbackType>(callbackFunction));
 
         myClass.SetProperty(L"Prop", BoxValue<WString>(L"One"));
         myClass.SetProperty(L"Prop", BoxValue<WString>(L"Two"));
         myClass.DetachEvent(L"PropChanged", handler);
         myClass.SetProperty(L"Prop", BoxValue<WString>(L"Three"));
     }
     DestroyGlobalTypeManager();
 }
 ]]></example>