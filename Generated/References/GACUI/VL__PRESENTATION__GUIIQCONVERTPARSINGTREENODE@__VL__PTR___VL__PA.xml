<Document accessor="" category="Function" name="GuiIqConvertParsingTreeNode"><summary>Convert parser result to a strong typed AST node. Usually you don&apos;t need to use this function, unless you are doing meta programming like error recovering or implementing intellisense for an editor.</summary><returns>Returns the strong typed AST node.</returns><param name="node">The parser result.</param><param name="tokens">Tokens for parsing. You can get the <symbol name="RegexLexer" docId="vl::regex::RegexLexer"/> by calling <symbol name="GetLexer"/> from <symbol name="GuiIqLoadTable" docId="vl::presentation::GuiIqLoadTable@::vl::Ptr&lt;::vl::parsing::tabling::ParsingTable&gt;()"/></param><signature><![CDATA[vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(
    vl::Ptr<vl::parsing::ParsingTreeNode> node,
    vl::collections::List<vl::regex::RegexToken> const & tokens
);
]]></signature><seealsos><symbol name="Ptr" docId="vl::Ptr"/><symbol name="List" docId="vl::collections::List"/><symbol name="ParsingTreeCustomBase" docId="vl::parsing::ParsingTreeCustomBase"/><symbol name="ParsingTreeNode" docId="vl::parsing::ParsingTreeNode"/><symbol name="RegexToken" docId="vl::regex::RegexToken"/></seealsos></Document>