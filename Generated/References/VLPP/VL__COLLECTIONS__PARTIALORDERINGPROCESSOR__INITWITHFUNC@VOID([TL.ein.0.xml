<example><![CDATA[
 int main()
 {
     //         apple
     //           ^
     //           |
     //         ball
     //         ^  \
     //        /    V
     //     cat <-- dog
     //       ^     ^
     //      /       \
     //  elephant   fish
 
     List<WString> items;
     items.Add(L"elephant");
     items.Add(L"fish");
     items.Add(L"ball");
     items.Add(L"cat");
     items.Add(L"dog");
     items.Add(L"apple");
 
     auto depFunc = [](const WString& a, const WString& b)
     {
         return
             (a == L"ball" && b == L"apple") ||
             (a == L"cat" && b == L"ball") ||
             (a == L"ball" && b == L"dog") ||
             (a == L"dog" && b == L"cat") ||
             (a == L"elephant" && b == L"cat") ||
             (a == L"fish" && b == L"dog")
             ;
     };
 
     PartialOrderingProcessor pop;
     pop.InitWithFunc(items, depFunc);
     pop.Sort();
 
     for (vint i = 0; i < pop.components.Count(); i++)
     {
         auto& c = pop.components[i];
         Console::WriteLine(
             L"Component " + itow(i) + L": " +
             Range<vint>(0, c.nodeCount)
                 .Select([&](vint ni){ return items[c.firstNode[ni]]; })
                 .Aggregate([](const WString& a, const WString& b){ return a + L" " + b; })
         );
     }
 
     for (vint i = 0; i < pop.nodes.Count(); i++)
     {
         auto& n = pop.nodes[i];
         if(n.outs->Count() > 0)
         {
             Console::WriteLine(
                 L"Node " + items[i] + L" <- " +
                 From(*n.outs)
                     .Select([&](vint ni){ return items[ni]; })
                     .Aggregate([](const WString& a, const WString& b){ return a + L" " + b; })
             );
         }
     }
 }
 ]]></example>