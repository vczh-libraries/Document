<example><![CDATA[
 int main()
 {
     //         apple
     //           ^
     //           |
     //         ball
     //         ^  \
     //        /    V
     //     cat <-- dog
     //       ^     ^
     //      /       \
     //  elephant   fish
 
     List<WString> items;
     items.Add(L"elephant");
     items.Add(L"fish");
     items.Add(L"ball");
     items.Add(L"cat");
     items.Add(L"dog");
     items.Add(L"apple");
 
     Group<WString, WString> depGroup;
     depGroup.Add(L"ball", L"apple");
     depGroup.Add(L"cat", L"ball");
     depGroup.Add(L"ball", L"dog");
     depGroup.Add(L"dog", L"cat");
     depGroup.Add(L"elephant", L"cat");
     depGroup.Add(L"fish", L"dog");
 
     PartialOrderingProcessor pop;
     pop.InitWithGroup(items, depGroup);
     pop.Sort();
 
     for (vint i = 0; i < pop.components.Count(); i++)
     {
         auto& c = pop.components[i];
         Console::WriteLine(
             L"Component " + itow(i) + L": " +
             Range<vint>(0, c.nodeCount)
                 .Select([&](vint ni){ return items[c.firstNode[ni]]; })
                 .Aggregate([](const WString& a, const WString& b){ return a + L" " + b; })
         );
     }
 
     for (vint i = 0; i < pop.nodes.Count(); i++)
     {
         auto& n = pop.nodes[i];
         if(n.outs->Count() > 0)
         {
             Console::WriteLine(
                 L"Node " + items[i] + L" <- " +
                 From(*n.outs)
                     .Select([&](vint ni){ return items[ni]; })
                     .Aggregate([](const WString& a, const WString& b){ return a + L" " + b; })
             );
         }
     }
 }
 ]]></example>