<reference>
  <namespace name="::vl::reflection::description">
    <document name="class AsyncContext" docId="vl::reflection::description::AsyncContext" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT">
      <document name="function $__ctor" docId="vl::reflection::description::AsyncContext::$__ctor@(::vl::reflection::description::Value const &amp;)" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT__$__CTOR@(__VL__REFLEC"/>
      <document name="function Cancel" docId="vl::reflection::description::AsyncContext::Cancel@bool()" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT__CANCEL@BOOL()"/>
      <document name="function GetContext" docId="vl::reflection::description::AsyncContext::GetContext@::vl::reflection::description::Value const &amp;()" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT__GETCONTEXT@__VL__REFL"/>
      <document name="function IsCancelled" docId="vl::reflection::description::AsyncContext::IsCancelled@bool()" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT__ISCANCELLED@BOOL()"/>
      <document name="function SetContext" docId="vl::reflection::description::AsyncContext::SetContext@void(::vl::reflection::description::Value const &amp;)" file="VL__REFLECTION__DESCRIPTION__ASYNCCONTEXT__SETCONTEXT@VOID(__VL_"/>
    </document>
    <document name="enum class AsyncStatus" docId="vl::reflection::description::AsyncStatus" file="VL__REFLECTION__DESCRIPTION__ASYNCSTATUS"/>
    <document name="class CoroutineResult" docId="vl::reflection::description::CoroutineResult" file="VL__REFLECTION__DESCRIPTION__COROUTINERESULT">
      <document name="function GetFailure" docId="vl::reflection::description::CoroutineResult::GetFailure@::vl::Ptr&lt;::vl::reflection::description::IValueException&gt;()" file="VL__REFLECTION__DESCRIPTION__COROUTINERESULT__GETFAILURE@__VL__P"/>
      <document name="function GetResult" docId="vl::reflection::description::CoroutineResult::GetResult@::vl::reflection::description::Value()" file="VL__REFLECTION__DESCRIPTION__COROUTINERESULT__GETRESULT@__VL__RE"/>
      <document name="function SetFailure" docId="vl::reflection::description::CoroutineResult::SetFailure@void(::vl::Ptr&lt;::vl::reflection::description::IValueException&gt;)" file="VL__REFLECTION__DESCRIPTION__COROUTINERESULT__SETFAILURE@VOID(__"/>
      <document name="function SetResult" docId="vl::reflection::description::CoroutineResult::SetResult@void(::vl::reflection::description::Value const &amp;)" file="VL__REFLECTION__DESCRIPTION__COROUTINERESULT__SETRESULT@VOID(__V"/>
    </document>
    <document name="enum class CoroutineStatus" docId="vl::reflection::description::CoroutineStatus" file="VL__REFLECTION__DESCRIPTION__COROUTINESTATUS"/>
    <document name="class IAsync" docId="vl::reflection::description::IAsync" file="VL__REFLECTION__DESCRIPTION__IASYNC">
      <document name="function Delay" docId="vl::reflection::description::IAsync::Delay@::vl::Ptr&lt;::vl::reflection::description::IAsync&gt;(::vl::vint)" file="VL__REFLECTION__DESCRIPTION__IASYNC__DELAY@__VL__PTR___VL__REFLE"/>
      <document name="function Execute" docId="vl::reflection::description::IAsync::Execute@bool(::vl::Func&lt;void(::vl::Ptr&lt;::vl::reflection::description::CoroutineResult&gt;)&gt; const &amp;, ::vl::Ptr&lt;::vl::reflection::description::AsyncContext&gt;)" file="VL__REFLECTION__DESCRIPTION__IASYNC__EXECUTE@BOOL(__VL__FUNC_VOI"/>
      <document name="function GetStatus" docId="vl::reflection::description::IAsync::GetStatus@::vl::reflection::description::AsyncStatus()" file="VL__REFLECTION__DESCRIPTION__IASYNC__GETSTATUS@__VL__REFLECTION_"/>
    </document>
    <document name="class IAsyncScheduler" docId="vl::reflection::description::IAsyncScheduler" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER">
      <document name="function DelayExecute" docId="vl::reflection::description::IAsyncScheduler::DelayExecute@void(::vl::Func&lt;void()&gt; const &amp;, ::vl::vint)" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__DELAYEXECUTE@VOID("/>
      <document name="function Execute" docId="vl::reflection::description::IAsyncScheduler::Execute@void(::vl::Func&lt;void()&gt; const &amp;)" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__EXECUTE@VOID(__VL_"/>
      <document name="function ExecuteInBackground" docId="vl::reflection::description::IAsyncScheduler::ExecuteInBackground@void(::vl::Func&lt;void()&gt; const &amp;)" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__EXECUTEINBACKGROUN"/>
      <document name="function GetSchedulerForCurrentThread" docId="vl::reflection::description::IAsyncScheduler::GetSchedulerForCurrentThread@::vl::Ptr&lt;::vl::reflection::description::IAsyncScheduler&gt;()" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__GETSCHEDULERFORCUR"/>
      <document name="function RegisterDefaultScheduler" docId="vl::reflection::description::IAsyncScheduler::RegisterDefaultScheduler@void(::vl::Ptr&lt;::vl::reflection::description::IAsyncScheduler&gt;)" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__REGISTERDEFAULTSCH"/>
      <document name="function RegisterSchedulerForCurrentThread" docId="vl::reflection::description::IAsyncScheduler::RegisterSchedulerForCurrentThread@void(::vl::Ptr&lt;::vl::reflection::description::IAsyncScheduler&gt;)" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__REGISTERSCHEDULERF"/>
      <document name="function UnregisterDefaultScheduler" docId="vl::reflection::description::IAsyncScheduler::UnregisterDefaultScheduler@::vl::Ptr&lt;::vl::reflection::description::IAsyncScheduler&gt;()" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__UNREGISTERDEFAULTS"/>
      <document name="function UnregisterSchedulerForCurrentThread" docId="vl::reflection::description::IAsyncScheduler::UnregisterSchedulerForCurrentThread@::vl::Ptr&lt;::vl::reflection::description::IAsyncScheduler&gt;()" file="VL__REFLECTION__DESCRIPTION__IASYNCSCHEDULER__UNREGISTERSCHEDULE"/>
    </document>
    <document name="class ICoroutine" docId="vl::reflection::description::ICoroutine" file="VL__REFLECTION__DESCRIPTION__ICOROUTINE">
      <document name="function GetFailure" docId="vl::reflection::description::ICoroutine::GetFailure@::vl::Ptr&lt;::vl::reflection::description::IValueException&gt;()" file="VL__REFLECTION__DESCRIPTION__ICOROUTINE__GETFAILURE@__VL__PTR___"/>
      <document name="function GetStatus" docId="vl::reflection::description::ICoroutine::GetStatus@::vl::reflection::description::CoroutineStatus()" file="VL__REFLECTION__DESCRIPTION__ICOROUTINE__GETSTATUS@__VL__REFLECT"/>
      <document name="function Resume" docId="vl::reflection::description::ICoroutine::Resume@void(bool, ::vl::Ptr&lt;::vl::reflection::description::CoroutineResult&gt;)" file="VL__REFLECTION__DESCRIPTION__ICOROUTINE__RESUME@VOID(BOOL,___VL_"/>
    </document>
    <document name="class IFuture" docId="vl::reflection::description::IFuture" file="VL__REFLECTION__DESCRIPTION__IFUTURE">
      <document name="function Create" docId="vl::reflection::description::IFuture::Create@::vl::Ptr&lt;::vl::reflection::description::IFuture&gt;()" file="VL__REFLECTION__DESCRIPTION__IFUTURE__CREATE@__VL__PTR___VL__REF"/>
      <document name="function GetPromise" docId="vl::reflection::description::IFuture::GetPromise@::vl::Ptr&lt;::vl::reflection::description::IPromise&gt;()" file="VL__REFLECTION__DESCRIPTION__IFUTURE__GETPROMISE@__VL__PTR___VL_"/>
    </document>
    <document name="class IPromise" docId="vl::reflection::description::IPromise" file="VL__REFLECTION__DESCRIPTION__IPROMISE">
      <document name="function SendFailure" docId="vl::reflection::description::IPromise::SendFailure@bool(::vl::Ptr&lt;::vl::reflection::description::IValueException&gt;)" file="VL__REFLECTION__DESCRIPTION__IPROMISE__SENDFAILURE@BOOL(__VL__PT"/>
      <document name="function SendResult" docId="vl::reflection::description::IPromise::SendResult@bool(::vl::reflection::description::Value const &amp;)" file="VL__REFLECTION__DESCRIPTION__IPROMISE__SENDRESULT@BOOL(__VL__REF"/>
    </document>
    <document name="class Localization" docId="vl::reflection::description::Localization" file="VL__REFLECTION__DESCRIPTION__LOCALIZATION"/>
    <document name="class Math" docId="vl::reflection::description::Math" file="VL__REFLECTION__DESCRIPTION__MATH"/>
    <document name="class Sys" docId="vl::reflection::description::Sys" file="VL__REFLECTION__DESCRIPTION__SYS"/>
  </namespace>
  <namespace name="::vl::workflow">
    <document name="class IWfCompilerCallback" docId="vl::workflow::IWfCompilerCallback" file="VL__WORKFLOW__IWFCOMPILERCALLBACK">
      <document name="function OnGenerateCode" docId="vl::workflow::IWfCompilerCallback::OnGenerateCode@void(::vl::Ptr&lt;::vl::workflow::WfModule&gt;)" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONGENERATECODE@VOID(__VL__PTR"/>
      <document name="function OnGenerateDebugInfo" docId="vl::workflow::IWfCompilerCallback::OnGenerateDebugInfo@void()" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONGENERATEDEBUGINFO@VOID()"/>
      <document name="function OnGenerateMetadata" docId="vl::workflow::IWfCompilerCallback::OnGenerateMetadata@void()" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONGENERATEMETADATA@VOID()"/>
      <document name="function OnInitialize" docId="vl::workflow::IWfCompilerCallback::OnInitialize@void(::vl::workflow::analyzer::WfLexicalScopeManager *)" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONINITIALIZE@VOID(__VL__WORKF"/>
      <document name="function OnLoadEnvironment" docId="vl::workflow::IWfCompilerCallback::OnLoadEnvironment@void()" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONLOADENVIRONMENT@VOID()"/>
      <document name="function OnValidateModule" docId="vl::workflow::IWfCompilerCallback::OnValidateModule@void(::vl::Ptr&lt;::vl::workflow::WfModule&gt;)" file="VL__WORKFLOW__IWFCOMPILERCALLBACK__ONVALIDATEMODULE@VOID(__VL__P"/>
    </document>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfAttribute&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFATTRIBUTE"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfType&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFTYPE_,___"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfExpression&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFEXPRESSIO"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfStatement&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFSTATEMENT"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfDeclaration&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFDECLARATI"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfModule&gt;, ::vl::WString const &amp;, ::vl::parsing::ParsingWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFMODULE_,_"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfAttribute&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFATTRIBUTE2"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfType&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFTYPE_,___2"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfExpression&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFEXPRESSIO2"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfStatement&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFSTATEMENT2"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfDeclaration&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFDECLARATI2"/>
    <document name="function WfPrint" docId="vl::workflow::WfPrint@void(::vl::Ptr&lt;::vl::workflow::WfModule&gt;, ::vl::WString const &amp;, ::vl::stream::TextWriter &amp;)" file="VL__WORKFLOW__WFPRINT@VOID(__VL__PTR___VL__WORKFLOW__WFMODULE_,_2"/>
  </namespace>
  <namespace name="::vl::workflow::analyzer">
    <document name="class WfLexicalScopeManager" docId="vl::workflow::analyzer::WfLexicalScopeManager" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER">
      <document name="function $__ctor" docId="vl::workflow::analyzer::WfLexicalScopeManager::$__ctor@(::vl::Ptr&lt;::vl::parsing::tabling::ParsingTable&gt;)" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__$__CTOR@(__VL__PT"/>
      <document name="function AddModule" docId="vl::workflow::analyzer::WfLexicalScopeManager::AddModule@::vl::vint(::vl::WString const &amp;)" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__ADDMODULE@__VL__V"/>
      <document name="function AddModule" docId="vl::workflow::analyzer::WfLexicalScopeManager::AddModule@::vl::vint(::vl::Ptr&lt;::vl::workflow::WfModule&gt;)" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__ADDMODULE@__VL__V2"/>
      <document name="function Clear" docId="vl::workflow::analyzer::WfLexicalScopeManager::Clear@void(bool, bool)" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__CLEAR@VOID(BOOL,_"/>
      <document name="function GetModuleCodes" docId="vl::workflow::analyzer::WfLexicalScopeManager::GetModuleCodes@::vl::workflow::analyzer::WfLexicalScopeManager::ModuleCodeList &amp;()" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__GETMODULECODES@__"/>
      <document name="function GetModules" docId="vl::workflow::analyzer::WfLexicalScopeManager::GetModules@::vl::workflow::analyzer::WfLexicalScopeManager::ModuleList &amp;()" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__GETMODULES@__VL__"/>
      <document name="function Rebuild" docId="vl::workflow::analyzer::WfLexicalScopeManager::Rebuild@void(bool, ::vl::workflow::IWfCompilerCallback *)" file="VL__WORKFLOW__ANALYZER__WFLEXICALSCOPEMANAGER__REBUILD@VOID(BOOL"/>
    </document>
  </namespace>
  <namespace name="::vl::workflow::emitter">
    <document name="function Compile" docId="vl::workflow::emitter::Compile@::vl::Ptr&lt;::vl::workflow::runtime::WfAssembly&gt;(::vl::Ptr&lt;::vl::parsing::tabling::ParsingTable&gt;, ::vl::workflow::analyzer::WfLexicalScopeManager *, ::vl::collections::List&lt;::vl::WString&gt; &amp;, ::vl::collections::List&lt;::vl::Ptr&lt;::vl::parsing::ParsingError&gt;&gt; &amp;)" file="VL__WORKFLOW__EMITTER__COMPILE@__VL__PTR___VL__WORKFLOW__RUNTIME"/>
    <document name="function Compile" docId="vl::workflow::emitter::Compile@::vl::Ptr&lt;::vl::workflow::runtime::WfAssembly&gt;(::vl::Ptr&lt;::vl::parsing::tabling::ParsingTable&gt;, ::vl::collections::List&lt;::vl::WString&gt; &amp;, ::vl::collections::List&lt;::vl::Ptr&lt;::vl::parsing::ParsingError&gt;&gt; &amp;)" file="VL__WORKFLOW__EMITTER__COMPILE@__VL__PTR___VL__WORKFLOW__RUNTIME2"/>
    <document name="function GenerateAssembly" docId="vl::workflow::emitter::GenerateAssembly@::vl::Ptr&lt;::vl::workflow::runtime::WfAssembly&gt;(::vl::workflow::analyzer::WfLexicalScopeManager *, ::vl::workflow::IWfCompilerCallback *)" file="VL__WORKFLOW__EMITTER__GENERATEASSEMBLY@__VL__PTR___VL__WORKFLOW"/>
  </namespace>
  <namespace name="::vl::workflow::runtime">
    <document name="function GetDebuggerForCurrentThread" docId="vl::workflow::runtime::GetDebuggerForCurrentThread@::vl::Ptr&lt;::vl::workflow::runtime::WfDebugger&gt;()" file="VL__WORKFLOW__RUNTIME__GETDEBUGGERFORCURRENTTHREAD@__VL__PTR___V"/>
    <document name="class IWfBreakPointAction" docId="vl::workflow::runtime::IWfBreakPointAction" file="VL__WORKFLOW__RUNTIME__IWFBREAKPOINTACTION">
      <document name="function EvaluateCondition" docId="vl::workflow::runtime::IWfBreakPointAction::EvaluateCondition@bool(::vl::workflow::runtime::WfDebugger *)" file="VL__WORKFLOW__RUNTIME__IWFBREAKPOINTACTION__EVALUATECONDITION@BO"/>
      <document name="function PostAction" docId="vl::workflow::runtime::IWfBreakPointAction::PostAction@void(::vl::workflow::runtime::WfDebugger *, bool)" file="VL__WORKFLOW__RUNTIME__IWFBREAKPOINTACTION__POSTACTION@VOID(__VL"/>
    </document>
    <document name="function LoadFunction" docId="vl::workflow::runtime::LoadFunction@::vl::Ptr&lt;::vl::reflection::description::IValueFunctionProxy&gt;(::vl::Ptr&lt;::vl::workflow::runtime::WfRuntimeGlobalContext&gt;, ::vl::WString const &amp;)" file="VL__WORKFLOW__RUNTIME__LOADFUNCTION@__VL__PTR___VL__REFLECTION__"/>
    <document name="function LoadFunction" docId="vl::workflow::runtime::LoadFunction@::vl::Func&lt;[TFunction]&gt;(::vl::Ptr&lt;::vl::workflow::runtime::WfRuntimeGlobalContext&gt;, ::vl::WString const &amp;)" file="VL__WORKFLOW__RUNTIME__LOADFUNCTION@__VL__FUNC_[TFUNCTION]_(__VL"/>
    <document name="function SetDebuggerForCurrentThread" docId="vl::workflow::runtime::SetDebuggerForCurrentThread@void(::vl::Ptr&lt;::vl::workflow::runtime::WfDebugger&gt;)" file="VL__WORKFLOW__RUNTIME__SETDEBUGGERFORCURRENTTHREAD@VOID(__VL__PT"/>
    <document name="class WfAssembly" docId="vl::workflow::runtime::WfAssembly" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY">
      <document name="function $__ctor" docId="vl::workflow::runtime::WfAssembly::$__ctor@()" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__$__CTOR@()"/>
      <document name="function Deserialize" docId="vl::workflow::runtime::WfAssembly::Deserialize@::vl::Ptr&lt;::vl::workflow::runtime::WfAssembly&gt;(::vl::stream::IStream &amp;, ::vl::workflow::runtime::WfAssemblyLoadErrors &amp;)" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__DESERIALIZE@__VL__PTR___VL__W"/>
      <document name="function Serialize" docId="vl::workflow::runtime::WfAssembly::Serialize@void(::vl::stream::IStream &amp;)" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__SERIALIZE@VOID(__VL__STREAM__"/>
      <document name="variable functionByName" docId="vl::workflow::runtime::WfAssembly::functionByName" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__FUNCTIONBYNAME"/>
      <document name="variable functions" docId="vl::workflow::runtime::WfAssembly::functions" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__FUNCTIONS"/>
      <document name="variable insAfterCodegen" docId="vl::workflow::runtime::WfAssembly::insAfterCodegen" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__INSAFTERCODEGEN"/>
      <document name="variable insBeforeCodegen" docId="vl::workflow::runtime::WfAssembly::insBeforeCodegen" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__INSBEFORECODEGEN"/>
      <document name="variable instructions" docId="vl::workflow::runtime::WfAssembly::instructions" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__INSTRUCTIONS"/>
      <document name="variable typeImpl" docId="vl::workflow::runtime::WfAssembly::typeImpl" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__TYPEIMPL"/>
      <document name="variable variableNames" docId="vl::workflow::runtime::WfAssembly::variableNames" file="VL__WORKFLOW__RUNTIME__WFASSEMBLY__VARIABLENAMES"/>
    </document>
    <document name="class WfAssemblyFunction" docId="vl::workflow::runtime::WfAssemblyFunction" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION">
      <document name="variable argumentNames" docId="vl::workflow::runtime::WfAssemblyFunction::argumentNames" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__ARGUMENTNAMES"/>
      <document name="variable capturedVariableNames" docId="vl::workflow::runtime::WfAssemblyFunction::capturedVariableNames" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__CAPTUREDVARIABLENAMES"/>
      <document name="variable firstInstruction" docId="vl::workflow::runtime::WfAssemblyFunction::firstInstruction" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__FIRSTINSTRUCTION"/>
      <document name="variable lastInstruction" docId="vl::workflow::runtime::WfAssemblyFunction::lastInstruction" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__LASTINSTRUCTION"/>
      <document name="variable localVariableNames" docId="vl::workflow::runtime::WfAssemblyFunction::localVariableNames" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__LOCALVARIABLENAMES"/>
      <document name="variable name" docId="vl::workflow::runtime::WfAssemblyFunction::name" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYFUNCTION__NAME"/>
    </document>
    <document name="class WfAssemblyLoadErrors" docId="vl::workflow::runtime::WfAssemblyLoadErrors" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYLOADERRORS">
      <document name="variable duplicatedTypes" docId="vl::workflow::runtime::WfAssemblyLoadErrors::duplicatedTypes" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYLOADERRORS__DUPLICATEDTYPES"/>
      <document name="variable unresolvedMembers" docId="vl::workflow::runtime::WfAssemblyLoadErrors::unresolvedMembers" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYLOADERRORS__UNRESOLVEDMEMBERS"/>
      <document name="variable unresolvedTypes" docId="vl::workflow::runtime::WfAssemblyLoadErrors::unresolvedTypes" file="VL__WORKFLOW__RUNTIME__WFASSEMBLYLOADERRORS__UNRESOLVEDTYPES"/>
    </document>
    <document name="struct WfBreakPoint" docId="vl::workflow::runtime::WfBreakPoint" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT">
      <document name="function Attach" docId="vl::workflow::runtime::WfBreakPoint::Attach@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IEventInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__ATTACH@__VL__WORKFLOW__RUNT"/>
      <document name="function Create" docId="vl::workflow::runtime::WfBreakPoint::Create@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::description::ITypeDescriptor *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__CREATE@__VL__WORKFLOW__RUNT"/>
      <document name="function Detach" docId="vl::workflow::runtime::WfBreakPoint::Detach@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IEventInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__DETACH@__VL__WORKFLOW__RUNT"/>
      <document name="function Get" docId="vl::workflow::runtime::WfBreakPoint::Get@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IPropertyInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__GET@__VL__WORKFLOW__RUNTIME"/>
      <document name="function Ins" docId="vl::workflow::runtime::WfBreakPoint::Ins@::vl::workflow::runtime::WfBreakPoint(::vl::workflow::runtime::WfAssembly *, ::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__INS@__VL__WORKFLOW__RUNTIME"/>
      <document name="function Invoke" docId="vl::workflow::runtime::WfBreakPoint::Invoke@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IEventInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__INVOKE@__VL__WORKFLOW__RUNT"/>
      <document name="function Invoke" docId="vl::workflow::runtime::WfBreakPoint::Invoke@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IMethodInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__INVOKE@__VL__WORKFLOW__RUNT2"/>
      <document name="function Read" docId="vl::workflow::runtime::WfBreakPoint::Read@::vl::workflow::runtime::WfBreakPoint(::vl::workflow::runtime::WfAssembly *, ::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__READ@__VL__WORKFLOW__RUNTIM"/>
      <document name="function Set" docId="vl::workflow::runtime::WfBreakPoint::Set@::vl::workflow::runtime::WfBreakPoint(::vl::reflection::DescriptableObject *, ::vl::reflection::description::IPropertyInfo *)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__SET@__VL__WORKFLOW__RUNTIME"/>
      <document name="function Write" docId="vl::workflow::runtime::WfBreakPoint::Write@::vl::workflow::runtime::WfBreakPoint(::vl::workflow::runtime::WfAssembly *, ::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFBREAKPOINT__WRITE@__VL__WORKFLOW__RUNTI"/>
    </document>
    <document name="class WfDebugger" docId="vl::workflow::runtime::WfDebugger" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER">
      <document name="function $__ctor" docId="vl::workflow::runtime::WfDebugger::$__ctor@()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__$__CTOR@()"/>
      <document name="function AddBreakPoint" docId="vl::workflow::runtime::WfDebugger::AddBreakPoint@::vl::vint(::vl::workflow::runtime::WfBreakPoint const &amp;)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ADDBREAKPOINT@__VL__VINT(__VL"/>
      <document name="function AddCodeLineBreakPoint" docId="vl::workflow::runtime::WfDebugger::AddCodeLineBreakPoint@::vl::vint(::vl::workflow::runtime::WfAssembly *, ::vl::vint, ::vl::vint, bool)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ADDCODELINEBREAKPOINT@__VL__V"/>
      <document name="function EnableBreakPoint" docId="vl::workflow::runtime::WfDebugger::EnableBreakPoint@bool(::vl::vint, bool)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ENABLEBREAKPOINT@BOOL(__VL__V"/>
      <document name="function GetBreakException" docId="vl::workflow::runtime::WfDebugger::GetBreakException@bool()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETBREAKEXCEPTION@BOOL()"/>
      <document name="function GetBreakPoint" docId="vl::workflow::runtime::WfDebugger::GetBreakPoint@::vl::workflow::runtime::WfBreakPoint const &amp;(::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETBREAKPOINT@__VL__WORKFLOW_"/>
      <document name="function GetBreakPointCount" docId="vl::workflow::runtime::WfDebugger::GetBreakPointCount@::vl::vint()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETBREAKPOINTCOUNT@__VL__VINT"/>
      <document name="function GetCurrentPosition" docId="vl::workflow::runtime::WfDebugger::GetCurrentPosition@::vl::parsing::ParsingTextRange const &amp;(bool, ::vl::workflow::runtime::WfRuntimeThreadContext *, ::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETCURRENTPOSITION@__VL__PARS"/>
      <document name="function GetLastActivatedBreakPoint" docId="vl::workflow::runtime::WfDebugger::GetLastActivatedBreakPoint@::vl::vint()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETLASTACTIVATEDBREAKPOINT@__"/>
      <document name="function GetRunningType" docId="vl::workflow::runtime::WfDebugger::GetRunningType@::vl::workflow::runtime::WfDebugger::RunningType()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETRUNNINGTYPE@__VL__WORKFLOW"/>
      <document name="function GetState" docId="vl::workflow::runtime::WfDebugger::GetState@::vl::workflow::runtime::WfDebugger::State()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETSTATE@__VL__WORKFLOW__RUNT"/>
      <document name="function GetValueByName" docId="vl::workflow::runtime::WfDebugger::GetValueByName@::vl::reflection::description::Value(::vl::WString const &amp;, ::vl::workflow::runtime::WfRuntimeThreadContext *, ::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__GETVALUEBYNAME@__VL__REFLECTI"/>
      <document name="function IsBreakPointAvailable" docId="vl::workflow::runtime::WfDebugger::IsBreakPointAvailable@bool(::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ISBREAKPOINTAVAILABLE@BOOL(__"/>
      <document name="function OnBlockExecution" docId="vl::workflow::runtime::WfDebugger::OnBlockExecution@void()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ONBLOCKEXECUTION@VOID()"/>
      <document name="function OnStartExecution" docId="vl::workflow::runtime::WfDebugger::OnStartExecution@void()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ONSTARTEXECUTION@VOID()"/>
      <document name="function OnStopExecution" docId="vl::workflow::runtime::WfDebugger::OnStopExecution@void()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__ONSTOPEXECUTION@VOID()"/>
      <document name="function Pause" docId="vl::workflow::runtime::WfDebugger::Pause@bool()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__PAUSE@BOOL()"/>
      <document name="function RemoveBreakPoint" docId="vl::workflow::runtime::WfDebugger::RemoveBreakPoint@bool(::vl::vint)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__REMOVEBREAKPOINT@BOOL(__VL__V"/>
      <document name="function Run" docId="vl::workflow::runtime::WfDebugger::Run@bool()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__RUN@BOOL()"/>
      <document name="function SetBreakException" docId="vl::workflow::runtime::WfDebugger::SetBreakException@void(bool)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__SETBREAKEXCEPTION@VOID(BOOL)"/>
      <document name="enum State" docId="vl::workflow::runtime::WfDebugger::State" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__STATE"/>
      <document name="function StepInto" docId="vl::workflow::runtime::WfDebugger::StepInto@bool(bool)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__STEPINTO@BOOL(BOOL)"/>
      <document name="function StepOver" docId="vl::workflow::runtime::WfDebugger::StepOver@bool(bool)" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__STEPOVER@BOOL(BOOL)"/>
      <document name="function Stop" docId="vl::workflow::runtime::WfDebugger::Stop@bool()" file="VL__WORKFLOW__RUNTIME__WFDEBUGGER__STOP@BOOL()"/>
    </document>
    <document name="class WfInstructionDebugInfo" docId="vl::workflow::runtime::WfInstructionDebugInfo" file="VL__WORKFLOW__RUNTIME__WFINSTRUCTIONDEBUGINFO">
      <document name="variable codeInstructionMapping" docId="vl::workflow::runtime::WfInstructionDebugInfo::codeInstructionMapping" file="VL__WORKFLOW__RUNTIME__WFINSTRUCTIONDEBUGINFO__CODEINSTRUCTIONMA"/>
      <document name="variable instructionCodeMapping" docId="vl::workflow::runtime::WfInstructionDebugInfo::instructionCodeMapping" file="VL__WORKFLOW__RUNTIME__WFINSTRUCTIONDEBUGINFO__INSTRUCTIONCODEMA"/>
      <document name="variable moduleCodes" docId="vl::workflow::runtime::WfInstructionDebugInfo::moduleCodes" file="VL__WORKFLOW__RUNTIME__WFINSTRUCTIONDEBUGINFO__MODULECODES"/>
    </document>
    <document name="class WfRuntimeCallStackInfo" docId="vl::workflow::runtime::WfRuntimeCallStackInfo" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO">
      <document name="function GetFunctionName" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::GetFunctionName@::vl::WString()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GETFUNCTIONNAME@_"/>
      <document name="function GetRowAfterCodegen" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::GetRowAfterCodegen@::vl::vint()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GETROWAFTERCODEGE"/>
      <document name="function GetRowBeforeCodegen" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::GetRowBeforeCodegen@::vl::vint()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GETROWBEFORECODEG"/>
      <document name="function GetSourceCodeAfterCodegen" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::GetSourceCodeAfterCodegen@::vl::WString()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GETSOURCECODEAFTE"/>
      <document name="function GetSourceCodeBeforeCodegen" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::GetSourceCodeBeforeCodegen@::vl::WString()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GETSOURCECODEBEFO"/>
      <document name="variable arguments" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::arguments" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__ARGUMENTS"/>
      <document name="variable assembly" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::assembly" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__ASSEMBLY"/>
      <document name="variable captured" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::captured" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__CAPTURED"/>
      <document name="variable functionIndex" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::functionIndex" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__FUNCTIONINDEX"/>
      <document name="variable global" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::global" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__GLOBAL"/>
      <document name="variable instruction" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::instruction" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__INSTRUCTION"/>
      <document name="variable localVariables" docId="vl::workflow::runtime::WfRuntimeCallStackInfo::localVariables" file="VL__WORKFLOW__RUNTIME__WFRUNTIMECALLSTACKINFO__LOCALVARIABLES"/>
    </document>
    <document name="class WfRuntimeException" docId="vl::workflow::runtime::WfRuntimeException" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTION">
      <document name="function GetInfo" docId="vl::workflow::runtime::WfRuntimeException::GetInfo@::vl::Ptr&lt;::vl::workflow::runtime::WfRuntimeExceptionInfo&gt;()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTION__GETINFO@__VL__PTR___V"/>
      <document name="function IsFatal" docId="vl::workflow::runtime::WfRuntimeException::IsFatal@bool()" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTION__ISFATAL@BOOL()"/>
    </document>
    <document name="class WfRuntimeExceptionInfo" docId="vl::workflow::runtime::WfRuntimeExceptionInfo" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTIONINFO">
      <document name="variable callStack" docId="vl::workflow::runtime::WfRuntimeExceptionInfo::callStack" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTIONINFO__CALLSTACK"/>
      <document name="variable fatal" docId="vl::workflow::runtime::WfRuntimeExceptionInfo::fatal" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTIONINFO__FATAL"/>
      <document name="variable message" docId="vl::workflow::runtime::WfRuntimeExceptionInfo::message" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEEXCEPTIONINFO__MESSAGE"/>
    </document>
    <document name="class WfRuntimeGlobalContext" docId="vl::workflow::runtime::WfRuntimeGlobalContext" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEGLOBALCONTEXT">
      <document name="function $__ctor" docId="vl::workflow::runtime::WfRuntimeGlobalContext::$__ctor@(::vl::Ptr&lt;::vl::workflow::runtime::WfAssembly&gt;)" file="VL__WORKFLOW__RUNTIME__WFRUNTIMEGLOBALCONTEXT__$__CTOR@(__VL__PT"/>
    </document>
  </namespace>
</reference>
