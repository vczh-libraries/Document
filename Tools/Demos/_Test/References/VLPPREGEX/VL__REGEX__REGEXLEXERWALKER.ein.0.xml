<example><![CDATA[
 int main()
 {
     List<WString> tokenDefs;
     tokenDefs.Add(L"/d+./d+");
     tokenDefs.Add(L"/d+");
     tokenDefs.Add(L"/w+");
     tokenDefs.Add(L"/s+");
 
     RegexLexer lexer(tokenDefs, {});
     RegexLexerWalker walker = lexer.Walk();
 
     WString input = L"This book costs 2.5. That book costs 2.";
     const wchar_t* reading = input.Buffer();
 
     const wchar_t* tokenBegin = reading;
     const wchar_t* tokenEnd = nullptr;
     vint tokenId = -1;
 
     vint state = walker.GetStartState();
     while (*reading)
     {
         vint token = -1;
         bool finalState = false;
         bool previousTokenStop = false;
         walker.Walk(*reading++, state, token, finalState, previousTokenStop);
 
         if (previousTokenStop || !*reading)
         {
             if (tokenEnd)
             {
                 if (tokenBegin == tokenEnd)
                 {
                     Console::WriteLine(L"Recognized token: " + itow(tokenId) + L": <" + WString(*tokenBegin) + L">");
                     tokenBegin = reading;
                     tokenEnd = nullptr;
                     tokenId = -1;
                     state = walker.GetStartState();
                 }
                 else
                 {
                     Console::WriteLine(L"Recognized token: " + itow(tokenId) + L": <" + WString(tokenBegin, tokenEnd - tokenBegin) + L">");
                     tokenBegin = reading = tokenEnd;
                     tokenEnd = nullptr;
                     tokenId = -1;
                     state = walker.GetStartState();
                 }
             }
             else
             {
                 Console::WriteLine(L"Unrecognized character: <" + WString(*tokenBegin) + L">");
                 tokenBegin++;
                 state = walker.GetStartState();
             }
         }
         else if (finalState)
         {
             tokenEnd = reading;
             tokenId = token;
         }
     }
 }
 ]]></example>