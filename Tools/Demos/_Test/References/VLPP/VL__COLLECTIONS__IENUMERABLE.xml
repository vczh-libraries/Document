<Document symbolId="vl::collections::IEnumerable" accessor="" category="Class" name="IEnumerable" declFile="Interfaces.h" declId="NI$vl::collections::IEnumerable"><summary>
 An enumerable interface representing all types that provide multiple values in order.
 range-based for-loop is not supported on enumerable yet, current we have &quot;FOREACH&quot; and &quot;FOREACH_INDEXER&quot; for iterating values.
 <see cref="CopyFrom"/> functions work for all enumerable implementation.
 <see cref="LazyList"/> provides high-level operations for enumerables, you can create a lazy list by calling <see cref="From"/> on any enumerables.
 </summary><example><![CDATA[
 int main()
 {
     List<vint> xs;
     for (vint i = 0; i < 10; i++)
         xs.Add(i);
     List<vint> ys;

     // replace values in ys using xs, it could also be appending instead of replacing, which is controlled by the third argument
     CopyFrom(ys, xs);

     // print ys
     FOREACH(vint, y, ys)
         Console::Write(itow(y) + L" ");
     Console::WriteLine(L"");

     // print ys, added by the position
     FOREACH_INDEXER(vint, y, i, ys)
         Console::Write(itow(y + i) + L" ");
     Console::WriteLine(L"");

     // print all odd numbers in ys
     FOREACH(vint, y, From(ys).Where([](int a){return a % 2 == 1;}))
         Console::Write(itow(y) + L" ");
     Console::WriteLine(L"");
 }
 ]]></example><typeparam name="T">Type of the values in the enumerable.</typeparam><signature><![CDATA[template <
    typename T
>
class IEnumerable
    : Interface;
]]></signature><basetypes><symbol name="Interface" docId="vl::Interface" declFile="Basic.h" declId="NI$vl::Interface"/></basetypes></Document>