<reference>
  <namespace name="::">
  </namespace>
  <namespace name="::vl">
    <document name="typedef AString" file="VL__ASTRING"/>
    <document name="function Combine" file="VL__COMBINE@__VL__FUNC___VL__FUNCTION_COMBINING__COMBINING@_[R1]"/>
    <document name="function Combiner" file="VL__COMBINER@__VL__FUNC___VL__FUNC_[T]_(__VL__FUNC_[T]_,___VL__F"/>
    <document name="function Curry" file="VL__CURRY@__VL__FUNC___VL__FUNC___VL__FUNCTION_BINDING__BINDING@"/>
    <document name="function Curry" file="VL__CURRY@__VL__FUNC___VL__FUNC___VL__FUNCTION_BINDING__BINDING@2"/>
    <document name="struct DateTime" file="VL__DATETIME">
      <document name="function $__ctor" file="VL__DATETIME__$__CTOR@()"/>
      <document name="function Backward" file="VL__DATETIME__BACKWARD@__VL__DATETIME(__VL__VUINT64_T)"/>
      <document name="function Forward" file="VL__DATETIME__FORWARD@__VL__DATETIME(__VL__VUINT64_T)"/>
      <document name="function FromDateTime" file="VL__DATETIME__FROMDATETIME@__VL__DATETIME(__VL__VINT,___VL__VINT"/>
      <document name="function LocalTime" file="VL__DATETIME__LOCALTIME@__VL__DATETIME()"/>
      <document name="function ToLocalTime" file="VL__DATETIME__TOLOCALTIME@__VL__DATETIME()"/>
      <document name="function ToUtcTime" file="VL__DATETIME__TOUTCTIME@__VL__DATETIME()"/>
      <document name="function UtcTime" file="VL__DATETIME__UTCTIME@__VL__DATETIME()"/>
    </document>
    <document name="class Error" file="VL__ERROR"/>
    <document name="class Event">
      <document name="Partial Specializations">
        <document name="class Event" file="VL__EVENT@_VOID([TARGS]...)_">
          <document name="function Add" file="VL__EVENT@_VOID([TARGS]...)___ADD@__VL__PTR___VL__EVENTHANDLER_("/>
          <document name="function Add" file="VL__EVENT@_VOID([TARGS]...)___ADD@__VL__PTR___VL__EVENTHANDLER_(2"/>
          <document name="function Add" file="VL__EVENT@_VOID([TARGS]...)___ADD@__VL__PTR___VL__EVENTHANDLER_(3"/>
          <document name="function Remove" file="VL__EVENT@_VOID([TARGS]...)___REMOVE@BOOL(__VL__PTR___VL__EVENTH"/>
          <document name="function operator ()" file="VL__EVENT@_VOID([TARGS]...)___OPERATOR_()@VOID([TARGS]...)"/>
        </document>
      </document>
    </document>
    <document name="class Exception" file="VL__EXCEPTION"/>
    <document name="function FinalizeGlobalStorage" file="VL__FINALIZEGLOBALSTORAGE@VOID()"/>
    <document name="class Func">
      <document name="Partial Specializations">
        <document name="class Func" file="VL__FUNC@_[R]([TARGS]...)_">
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@()"/>
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@(__VL__FUNC@_[R]([TARGS]...)"/>
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@(__VL__FUNC@_[R]([TARGS]...)2"/>
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@([R]([TARGS]...)__)"/>
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@([C]__,_[R]([TARGS]...)_([C]"/>
          <document name="function $__ctor" file="VL__FUNC@_[R]([TARGS]...)___$__CTOR@([C]_&amp;&amp;)"/>
          <document name="function $__type" file="VL__FUNC@_[R]([TARGS]...)___$__TYPE@BOOL()"/>
          <document name="function operator ()" file="VL__FUNC@_[R]([TARGS]...)___OPERATOR_()@[R]([TARGS]...)"/>
        </document>
      </document>
    </document>
    <document name="class GlobalStorage" file="VL__GLOBALSTORAGE"/>
    <document name="function InitializeGlobalStorage" file="VL__INITIALIZEGLOBALSTORAGE@VOID()"/>
    <document name="class Interface" file="VL__INTERFACE"/>
    <document name="struct KeyType" file="VL__KEYTYPE">
      <document name="function GetKeyValue" file="VL__KEYTYPE__GETKEYVALUE@[T]_CONST_&amp;([T]_CONST_&amp;)"/>
      <document name="typedef Type" file="VL__KEYTYPE__TYPE"/>
    </document>
    <document name="class Lazy" file="VL__LAZY">
      <document name="function $__ctor" file="VL__LAZY__$__CTOR@()"/>
      <document name="function $__ctor" file="VL__LAZY__$__CTOR@(__VL__FUNC_[T]()__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__LAZY__$__CTOR@([T]_CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__LAZY__$__CTOR@(__VL__LAZY_[T]__CONST_&amp;)"/>
      <document name="function IsAvailable" file="VL__LAZY__ISAVAILABLE@BOOL_CONST()"/>
      <document name="function IsEvaluated" file="VL__LAZY__ISEVALUATED@BOOL_CONST()"/>
      <document name="function Value" file="VL__LAZY__VALUE@[T]_CONST_&amp;()"/>
    </document>
    <document name="class Nullable" file="VL__NULLABLE">
      <document name="function $__ctor" file="VL__NULLABLE__$__CTOR@()"/>
      <document name="function $__ctor" file="VL__NULLABLE__$__CTOR@([T]_CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__NULLABLE__$__CTOR@([T]_&amp;&amp;)"/>
      <document name="function $__ctor" file="VL__NULLABLE__$__CTOR@(__VL__NULLABLE_[T]__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__NULLABLE__$__CTOR@(__VL__NULLABLE_[T]__&amp;&amp;)"/>
      <document name="function $__type" file="VL__NULLABLE__$__TYPE@BOOL()"/>
      <document name="function Value" file="VL__NULLABLE__VALUE@[T]_CONST_&amp;()"/>
      <document name="function operator =" file="VL__NULLABLE__OPERATOR_=@__VL__NULLABLE_[T]__&amp;([T]_CONST_&amp;)"/>
      <document name="function operator =" file="VL__NULLABLE__OPERATOR_=@__VL__NULLABLE_[T]__&amp;(__VL__NULLABLE_[T"/>
      <document name="function operator =" file="VL__NULLABLE__OPERATOR_=@__VL__NULLABLE_[T]__&amp;(__VL__NULLABLE_[T2"/>
    </document>
    <document name="class Object" file="VL__OBJECT"/>
    <document name="class ObjectBox" file="VL__OBJECTBOX">
      <document name="function $__ctor" file="VL__OBJECTBOX__$__CTOR@([T]_CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__OBJECTBOX__$__CTOR@([T]_&amp;&amp;)"/>
      <document name="function $__ctor" file="VL__OBJECTBOX__$__CTOR@(__VL__OBJECTBOX_[T]__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__OBJECTBOX__$__CTOR@(__VL__OBJECTBOX_[T]__&amp;&amp;)"/>
      <document name="function Unbox" file="VL__OBJECTBOX__UNBOX@[T]_CONST_&amp;()"/>
      <document name="function operator =" file="VL__OBJECTBOX__OPERATOR_=@__VL__OBJECTBOX_[T]__&amp;([T]_CONST_&amp;)"/>
      <document name="function operator =" file="VL__OBJECTBOX__OPERATOR_=@__VL__OBJECTBOX_[T]__&amp;(__VL__OBJECTBOX"/>
      <document name="function operator =" file="VL__OBJECTBOX__OPERATOR_=@__VL__OBJECTBOX_[T]__&amp;(__VL__OBJECTBOX2"/>
    </document>
    <document name="class ObjectString" file="VL__OBJECTSTRING">
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@()"/>
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@([T]_CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@([T]_CONST__,___VL__VINT)"/>
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@([T]_CONST__,_BOOL)"/>
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@(__VL__OBJECTSTRING_[T]__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__OBJECTSTRING__$__CTOR@(__VL__OBJECTSTRING_[T]__&amp;&amp;)"/>
      <document name="function Buffer" file="VL__OBJECTSTRING__BUFFER@[T]_CONST__()"/>
      <document name="function IndexOf" file="VL__OBJECTSTRING__INDEXOF@__VL__VINT([T])"/>
      <document name="function Insert" file="VL__OBJECTSTRING__INSERT@__VL__OBJECTSTRING_[T]_(__VL__VINT,___V"/>
      <document name="function Left" file="VL__OBJECTSTRING__LEFT@__VL__OBJECTSTRING_[T]_(__VL__VINT)"/>
      <document name="function Length" file="VL__OBJECTSTRING__LENGTH@__VL__VINT()"/>
      <document name="function Remove" file="VL__OBJECTSTRING__REMOVE@__VL__OBJECTSTRING_[T]_(__VL__VINT,___V"/>
      <document name="function Right" file="VL__OBJECTSTRING__RIGHT@__VL__OBJECTSTRING_[T]_(__VL__VINT)"/>
      <document name="function Sub" file="VL__OBJECTSTRING__SUB@__VL__OBJECTSTRING_[T]_(__VL__VINT,___VL__"/>
    </document>
    <document name="struct POD" file="VL__POD">
      <document name="variable Result" file="VL__POD__RESULT"/>
    </document>
    <document name="class Ptr" file="VL__PTR">
      <document name="function $__ctor" file="VL__PTR__$__CTOR@()"/>
      <document name="function $__ctor" file="VL__PTR__$__CTOR@([T]__)"/>
      <document name="function $__ctor" file="VL__PTR__$__CTOR@(__VL__PTR_[T]__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__PTR__$__CTOR@(__VL__PTR_[T]__&amp;&amp;)"/>
      <document name="function $__ctor" file="VL__PTR__$__CTOR@(__VL__PTR_[C]__CONST_&amp;)"/>
      <document name="function $__ctor" file="VL__PTR__$__CTOR@(__VL__PTR_[C]__&amp;&amp;)"/>
      <document name="function $__type" file="VL__PTR__$__TYPE@BOOL()"/>
      <document name="function Cast" file="VL__PTR__CAST@__VL__PTR_[C]_()"/>
      <document name="function Detach" file="VL__PTR__DETACH@[T]__()"/>
      <document name="function Obj" file="VL__PTR__OBJ@[T]__()"/>
      <document name="function operator -&gt;" file="VL__PTR__OPERATOR_-_@[T]__()"/>
      <document name="function operator =" file="VL__PTR__OPERATOR_=@__VL__PTR_[T]__&amp;([T]__)"/>
      <document name="function operator =" file="VL__PTR__OPERATOR_=@__VL__PTR_[T]__&amp;(__VL__PTR_[T]__CONST_&amp;)"/>
      <document name="function operator =" file="VL__PTR__OPERATOR_=@__VL__PTR_[T]__&amp;(__VL__PTR_[T]__&amp;&amp;)"/>
    </document>
    <document name="struct ReferenceCounterOperator" file="VL__REFERENCECOUNTEROPERATOR">
      <document name="function CreateCounter" file="VL__REFERENCECOUNTEROPERATOR__CREATECOUNTER@__VL__VINT_VOLATILE_"/>
      <document name="function DeleteReference" file="VL__REFERENCECOUNTEROPERATOR__DELETEREFERENCE@VOID(__VL__VINT_VO"/>
    </document>
    <document name="typedef WString" file="VL__WSTRING"/>
    <document name="function alower" file="VL__ALOWER@__VL__ASTRING(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atof" file="VL__ATOF@DOUBLE(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atof_test" file="VL__ATOF_TEST@DOUBLE(__VL__ASTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function atoi" file="VL__ATOI@__VL__VINT(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atoi64" file="VL__ATOI64@__VL__VINT64_T(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atoi64_test" file="VL__ATOI64_TEST@__VL__VINT64_T(__VL__ASTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function atoi_test" file="VL__ATOI_TEST@__VL__VINT(__VL__ASTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function atou" file="VL__ATOU@__VL__VUINT(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atou64" file="VL__ATOU64@__VL__VUINT64_T(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function atou64_test" file="VL__ATOU64_TEST@__VL__VUINT64_T(__VL__ASTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function atou_test" file="VL__ATOU_TEST@__VL__VUINT(__VL__ASTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function atow" file="VL__ATOW@__VL__WSTRING(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function aupper" file="VL__AUPPER@__VL__ASTRING(__VL__ASTRING_CONST_&amp;)"/>
    <document name="function ftoa" file="VL__FTOA@__VL__ASTRING(DOUBLE)"/>
    <document name="function ftow" file="VL__FTOW@__VL__WSTRING(DOUBLE)"/>
    <document name="function i64toa" file="VL__I64TOA@__VL__ASTRING(__VL__VINT64_T)"/>
    <document name="function i64tow" file="VL__I64TOW@__VL__WSTRING(__VL__VINT64_T)"/>
    <document name="function itoa" file="VL__ITOA@__VL__ASTRING(__VL__VINT)"/>
    <document name="function itow" file="VL__ITOW@__VL__WSTRING(__VL__VINT)"/>
    <document name="typedef pos_t" file="VL__POS_T"/>
    <document name="function u64toa" file="VL__U64TOA@__VL__ASTRING(__VL__VUINT64_T)"/>
    <document name="function u64tow" file="VL__U64TOW@__VL__WSTRING(__VL__VUINT64_T)"/>
    <document name="function utoa" file="VL__UTOA@__VL__ASTRING(__VL__VUINT)"/>
    <document name="function utow" file="VL__UTOW@__VL__WSTRING(__VL__VUINT)"/>
    <document name="typedef vint" file="VL__VINT"/>
    <document name="typedef vint16_t" file="VL__VINT16_T"/>
    <document name="typedef vint32_t" file="VL__VINT32_T"/>
    <document name="typedef vint64_t" file="VL__VINT64_T"/>
    <document name="typedef vint8_t" file="VL__VINT8_T"/>
    <document name="typedef vsint" file="VL__VSINT"/>
    <document name="typedef vuint" file="VL__VUINT"/>
    <document name="typedef vuint16_t" file="VL__VUINT16_T"/>
    <document name="typedef vuint32_t" file="VL__VUINT32_T"/>
    <document name="typedef vuint64_t" file="VL__VUINT64_T"/>
    <document name="typedef vuint8_t" file="VL__VUINT8_T"/>
    <document name="function wlower" file="VL__WLOWER@__VL__WSTRING(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtoa" file="VL__WTOA@__VL__ASTRING(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtof" file="VL__WTOF@DOUBLE(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtof_test" file="VL__WTOF_TEST@DOUBLE(__VL__WSTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function wtoi" file="VL__WTOI@__VL__VINT(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtoi64" file="VL__WTOI64@__VL__VINT64_T(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtoi64_test" file="VL__WTOI64_TEST@__VL__VINT64_T(__VL__WSTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function wtoi_test" file="VL__WTOI_TEST@__VL__VINT(__VL__WSTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function wtou" file="VL__WTOU@__VL__VUINT(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtou64" file="VL__WTOU64@__VL__VUINT64_T(__VL__WSTRING_CONST_&amp;)"/>
    <document name="function wtou64_test" file="VL__WTOU64_TEST@__VL__VUINT64_T(__VL__WSTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function wtou_test" file="VL__WTOU_TEST@__VL__VUINT(__VL__WSTRING_CONST_&amp;,_BOOL_&amp;)"/>
    <document name="function wupper" file="VL__WUPPER@__VL__WSTRING(__VL__WSTRING_CONST_&amp;)"/>
  </namespace>
  <namespace name="::vl::collections">
    <document name="class Array" file="VL__COLLECTIONS__ARRAY">
      <document name="function $__ctor" file="VL__COLLECTIONS__ARRAY__$__CTOR@(__VL__VINT)"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__ARRAY__$__CTOR@([T]_CONST__,___VL__VINT)"/>
      <document name="function Contains" file="VL__COLLECTIONS__ARRAY__CONTAINS@BOOL([K]_CONST_&amp;)"/>
      <document name="function IndexOf" file="VL__COLLECTIONS__ARRAY__INDEXOF@__VL__VINT([K]_CONST_&amp;)"/>
      <document name="function Resize" file="VL__COLLECTIONS__ARRAY__RESIZE@VOID(__VL__VINT)"/>
      <document name="function Set" file="VL__COLLECTIONS__ARRAY__SET@VOID(__VL__VINT,_[T]_CONST_&amp;)"/>
      <document name="function operator []" file="VL__COLLECTIONS__ARRAY__OPERATOR_[]@[T]_&amp;(__VL__VINT)"/>
    </document>
    <document name="class ArrayBase" file="VL__COLLECTIONS__ARRAYBASE">
      <document name="function Count" file="VL__COLLECTIONS__ARRAYBASE__COUNT@__VL__VINT()"/>
      <document name="function Get" file="VL__COLLECTIONS__ARRAYBASE__GET@[T]_CONST_&amp;(__VL__VINT)"/>
      <document name="function operator []" file="VL__COLLECTIONS__ARRAYBASE__OPERATOR_[]@[T]_CONST_&amp;(__VL__VINT)"/>
    </document>
    <document name="function CopyFrom" file="VL__COLLECTIONS__COPYFROM@VOID([DS]_&amp;,_[SS]_CONST_&amp;,_BOOL)"/>
    <document name="function CopyFrom" file="VL__COLLECTIONS__COPYFROM@VOID([DS]_&amp;,_[S]_CONST__,___VL__VINT,_"/>
    <document name="function CopyFrom" file="VL__COLLECTIONS__COPYFROM@VOID([DS]_&amp;,_[S]_CONST__,_[S]_CONST__,"/>
    <document name="class Dictionary" file="VL__COLLECTIONS__DICTIONARY">
      <document name="function $__ctor" file="VL__COLLECTIONS__DICTIONARY__$__CTOR@()"/>
      <document name="function Add" file="VL__COLLECTIONS__DICTIONARY__ADD@BOOL(__VL__COLLECTIONS__PAIR_[K"/>
      <document name="function Add" file="VL__COLLECTIONS__DICTIONARY__ADD@BOOL([KT]_CONST_&amp;,_[VT]_CONST_&amp;"/>
      <document name="function Clear" file="VL__COLLECTIONS__DICTIONARY__CLEAR@BOOL()"/>
      <document name="function Count" file="VL__COLLECTIONS__DICTIONARY__COUNT@__VL__VINT()"/>
      <document name="function Get" file="VL__COLLECTIONS__DICTIONARY__GET@[VT]_CONST_&amp;([KK]_CONST_&amp;)"/>
      <document name="function Keys" file="VL__COLLECTIONS__DICTIONARY__KEYS@__VL__COLLECTIONS__DICTIONARY_"/>
      <document name="function Remove" file="VL__COLLECTIONS__DICTIONARY__REMOVE@BOOL([KK]_CONST_&amp;)"/>
      <document name="function Set" file="VL__COLLECTIONS__DICTIONARY__SET@BOOL([KT]_CONST_&amp;,_[VT]_CONST_&amp;"/>
      <document name="function SetLessMemoryMode" file="VL__COLLECTIONS__DICTIONARY__SETLESSMEMORYMODE@VOID(BOOL)"/>
      <document name="function Values" file="VL__COLLECTIONS__DICTIONARY__VALUES@__VL__COLLECTIONS__DICTIONAR"/>
      <document name="function operator []" file="VL__COLLECTIONS__DICTIONARY__OPERATOR_[]@[VT]_CONST_&amp;([KK]_CONST"/>
    </document>
    <document name="class Group" file="VL__COLLECTIONS__GROUP">
      <document name="function Add" file="VL__COLLECTIONS__GROUP__ADD@BOOL(__VL__COLLECTIONS__PAIR_[KT],_["/>
      <document name="function Add" file="VL__COLLECTIONS__GROUP__ADD@BOOL([KT]_CONST_&amp;,_[VT]_CONST_&amp;)"/>
      <document name="function Clear" file="VL__COLLECTIONS__GROUP__CLEAR@BOOL()"/>
      <document name="function Contains" file="VL__COLLECTIONS__GROUP__CONTAINS@BOOL([KK]_CONST_&amp;)"/>
      <document name="function Contains" file="VL__COLLECTIONS__GROUP__CONTAINS@BOOL([KK]_CONST_&amp;,_[VK]_CONST_&amp;"/>
      <document name="function Count" file="VL__COLLECTIONS__GROUP__COUNT@__VL__VINT()"/>
      <document name="function Get" file="VL__COLLECTIONS__GROUP__GET@__VL__COLLECTIONS__GROUP__VALUECONTA"/>
      <document name="function GetByIndex" file="VL__COLLECTIONS__GROUP__GETBYINDEX@__VL__COLLECTIONS__GROUP__VAL"/>
      <document name="function Keys" file="VL__COLLECTIONS__GROUP__KEYS@__VL__COLLECTIONS__GROUP__KEYCONTAI"/>
      <document name="function Remove" file="VL__COLLECTIONS__GROUP__REMOVE@BOOL([KK]_CONST_&amp;)"/>
      <document name="function Remove" file="VL__COLLECTIONS__GROUP__REMOVE@BOOL([KK]_CONST_&amp;,_[VK]_CONST_&amp;)"/>
      <document name="function operator []" file="VL__COLLECTIONS__GROUP__OPERATOR_[]@__VL__COLLECTIONS__GROUP__VA"/>
    </document>
    <document name="class IEnumerable" file="VL__COLLECTIONS__IENUMERABLE">
      <document name="function CreateEnumerator" file="VL__COLLECTIONS__IENUMERABLE__CREATEENUMERATOR@__VL__COLLECTIONS"/>
    </document>
    <document name="class IEnumerator" file="VL__COLLECTIONS__IENUMERATOR">
      <document name="function Clone" file="VL__COLLECTIONS__IENUMERATOR__CLONE@__VL__COLLECTIONS__IENUMERAT"/>
      <document name="function Current" file="VL__COLLECTIONS__IENUMERATOR__CURRENT@[T]_CONST_&amp;()"/>
      <document name="function Index" file="VL__COLLECTIONS__IENUMERATOR__INDEX@__VL__VINT()"/>
      <document name="function Next" file="VL__COLLECTIONS__IENUMERATOR__NEXT@BOOL()"/>
      <document name="function Reset" file="VL__COLLECTIONS__IENUMERATOR__RESET@VOID()"/>
    </document>
    <document name="class LazyList" file="VL__COLLECTIONS__LAZYLIST">
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@(__VL__COLLECTIONS__IENUMERAT"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@(__VL__PTR___VL__COLLECTIONS_"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@(__VL__COLLECTIONS__IENUMERAB"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@(__VL__COLLECTIONS__LAZYLIST_"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@(__VL__PTR_[TCONTAINER]_)"/>
      <document name="function $__ctor" file="VL__COLLECTIONS__LAZYLIST__$__CTOR@()"/>
      <document name="function Aggregate" file="VL__COLLECTIONS__LAZYLIST__AGGREGATE@[T]([F])"/>
      <document name="function Aggregate" file="VL__COLLECTIONS__LAZYLIST__AGGREGATE@[I]([I],_[F])"/>
      <document name="function All" file="VL__COLLECTIONS__LAZYLIST__ALL@BOOL([F])"/>
      <document name="function Any" file="VL__COLLECTIONS__LAZYLIST__ANY@BOOL([F])"/>
      <document name="function Cast" file="VL__COLLECTIONS__LAZYLIST__CAST@__VL__COLLECTIONS__LAZYLIST___VL"/>
      <document name="function Concat" file="VL__COLLECTIONS__LAZYLIST__CONCAT@__VL__COLLECTIONS__LAZYLIST_[T"/>
      <document name="function Count" file="VL__COLLECTIONS__LAZYLIST__COUNT@__VL__VINT()"/>
      <document name="function Distinct" file="VL__COLLECTIONS__LAZYLIST__DISTINCT@__VL__COLLECTIONS__LAZYLIST_"/>
      <document name="function Except" file="VL__COLLECTIONS__LAZYLIST__EXCEPT@__VL__COLLECTIONS__LAZYLIST_[T"/>
      <document name="function FindType" file="VL__COLLECTIONS__LAZYLIST__FINDTYPE@__VL__COLLECTIONS__LAZYLIST_"/>
      <document name="function First" file="VL__COLLECTIONS__LAZYLIST__FIRST@[T]()"/>
      <document name="function First" file="VL__COLLECTIONS__LAZYLIST__FIRST@[T]([T])"/>
      <document name="function GroupBy" file="VL__COLLECTIONS__LAZYLIST__GROUPBY@__VL__COLLECTIONS__LAZYLIST__"/>
      <document name="function Intersect" file="VL__COLLECTIONS__LAZYLIST__INTERSECT@__VL__COLLECTIONS__LAZYLIST"/>
      <document name="function IsEmpty" file="VL__COLLECTIONS__LAZYLIST__ISEMPTY@BOOL()"/>
      <document name="function Last" file="VL__COLLECTIONS__LAZYLIST__LAST@[T]()"/>
      <document name="function Last" file="VL__COLLECTIONS__LAZYLIST__LAST@[T]([T])"/>
      <document name="function Max" file="VL__COLLECTIONS__LAZYLIST__MAX@[T]()"/>
      <document name="function Min" file="VL__COLLECTIONS__LAZYLIST__MIN@[T]()"/>
      <document name="function OrderBy" file="VL__COLLECTIONS__LAZYLIST__ORDERBY@__VL__COLLECTIONS__LAZYLIST_["/>
      <document name="function Pairwise" file="VL__COLLECTIONS__LAZYLIST__PAIRWISE@__VL__COLLECTIONS__LAZYLIST_"/>
      <document name="function Repeat" file="VL__COLLECTIONS__LAZYLIST__REPEAT@__VL__COLLECTIONS__LAZYLIST_[T"/>
      <document name="function Reverse" file="VL__COLLECTIONS__LAZYLIST__REVERSE@__VL__COLLECTIONS__LAZYLIST_["/>
      <document name="function Select" file="VL__COLLECTIONS__LAZYLIST__SELECT@__VL__COLLECTIONS__LAZYLIST___"/>
      <document name="function SelectMany" file="VL__COLLECTIONS__LAZYLIST__SELECTMANY@__VL__FUNCTION_LAMBDA__FUN"/>
      <document name="function Skip" file="VL__COLLECTIONS__LAZYLIST__SKIP@__VL__COLLECTIONS__LAZYLIST_[T]_"/>
      <document name="function Take" file="VL__COLLECTIONS__LAZYLIST__TAKE@__VL__COLLECTIONS__LAZYLIST_[T]_"/>
      <document name="function Union" file="VL__COLLECTIONS__LAZYLIST__UNION@__VL__COLLECTIONS__LAZYLIST_[T]"/>
      <document name="function Where" file="VL__COLLECTIONS__LAZYLIST__WHERE@__VL__COLLECTIONS__LAZYLIST_[T]"/>
    </document>
    <document name="class List" file="VL__COLLECTIONS__LIST">
      <document name="function $__ctor" file="VL__COLLECTIONS__LIST__$__CTOR@()"/>
      <document name="function Add" file="VL__COLLECTIONS__LIST__ADD@__VL__VINT([T]_CONST_&amp;)"/>
      <document name="function Contains" file="VL__COLLECTIONS__LIST__CONTAINS@BOOL([K]_CONST_&amp;)"/>
      <document name="function IndexOf" file="VL__COLLECTIONS__LIST__INDEXOF@__VL__VINT([K]_CONST_&amp;)"/>
      <document name="function Insert" file="VL__COLLECTIONS__LIST__INSERT@__VL__VINT(__VL__VINT,_[T]_CONST_&amp;"/>
      <document name="function Remove" file="VL__COLLECTIONS__LIST__REMOVE@BOOL([K]_CONST_&amp;)"/>
      <document name="function Set" file="VL__COLLECTIONS__LIST__SET@BOOL(__VL__VINT,_[T]_CONST_&amp;)"/>
      <document name="function operator []" file="VL__COLLECTIONS__LIST__OPERATOR_[]@[T]_&amp;(__VL__VINT)"/>
    </document>
    <document name="class ListBase" file="VL__COLLECTIONS__LISTBASE">
      <document name="function Clear" file="VL__COLLECTIONS__LISTBASE__CLEAR@BOOL()"/>
      <document name="function RemoveAt" file="VL__COLLECTIONS__LISTBASE__REMOVEAT@BOOL(__VL__VINT)"/>
      <document name="function RemoveRange" file="VL__COLLECTIONS__LISTBASE__REMOVERANGE@BOOL(__VL__VINT,___VL__VI"/>
      <document name="function SetLessMemoryMode" file="VL__COLLECTIONS__LISTBASE__SETLESSMEMORYMODE@VOID(BOOL)"/>
    </document>
    <document name="class Pair" file="VL__COLLECTIONS__PAIR">
      <document name="variable key" file="VL__COLLECTIONS__PAIR__KEY"/>
      <document name="variable value" file="VL__COLLECTIONS__PAIR__VALUE"/>
    </document>
    <document name="class PartialOrderingProcessor" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR">
      <document name="function InitWithFunc" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__INITWITHFUNC@VOID([TL"/>
      <document name="function InitWithGroup" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__INITWITHGROUP@VOID([T"/>
      <document name="function InitWithSubClass" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__INITWITHSUBCLASS@VOID"/>
      <document name="function Sort" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__SORT@VOID()"/>
      <document name="variable components" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__COMPONENTS"/>
      <document name="variable nodes" file="VL__COLLECTIONS__PARTIALORDERINGPROCESSOR__NODES"/>
    </document>
    <document name="class SortedList" file="VL__COLLECTIONS__SORTEDLIST">
      <document name="function $__ctor" file="VL__COLLECTIONS__SORTEDLIST__$__CTOR@()"/>
      <document name="function Add" file="VL__COLLECTIONS__SORTEDLIST__ADD@__VL__VINT([T]_CONST_&amp;)"/>
      <document name="function Contains" file="VL__COLLECTIONS__SORTEDLIST__CONTAINS@BOOL([K]_CONST_&amp;)"/>
      <document name="function IndexOf" file="VL__COLLECTIONS__SORTEDLIST__INDEXOF@__VL__VINT([K]_CONST_&amp;)"/>
      <document name="function IndexOfInternal" file="VL__COLLECTIONS__SORTEDLIST__INDEXOFINTERNAL@__VL__VINT([KEY]_CO"/>
      <document name="function Remove" file="VL__COLLECTIONS__SORTEDLIST__REMOVE@BOOL([K]_CONST_&amp;)"/>
    </document>
  </namespace>
  <namespace name="::vl::console">
    <document name="class Console" file="VL__CONSOLE__CONSOLE">
      <document name="function Read" file="VL__CONSOLE__CONSOLE__READ@__VL__WSTRING()"/>
      <document name="function Write" file="VL__CONSOLE__CONSOLE__WRITE@VOID(WCHAR_T_CONST__,___VL__VINT)"/>
      <document name="function Write" file="VL__CONSOLE__CONSOLE__WRITE@VOID(WCHAR_T_CONST__)"/>
      <document name="function Write" file="VL__CONSOLE__CONSOLE__WRITE@VOID(__VL__WSTRING_CONST_&amp;)"/>
      <document name="function WriteLine" file="VL__CONSOLE__CONSOLE__WRITELINE@VOID(__VL__WSTRING_CONST_&amp;)"/>
    </document>
  </namespace>
  <namespace name="::vl::function_lambda">
    <document name="function ConvertToFunction" file="VL__FUNCTION_LAMBDA__CONVERTTOFUNCTION@__VL__FUNCTION_LAMBDA__FU"/>
    <document name="function Lambda" file="VL__FUNCTION_LAMBDA__LAMBDA@__VL__FUNCTION_LAMBDA__LAMBDARETRIVE"/>
  </namespace>
  <namespace name="::vl::unittest">
    <document name="class UnitTest" file="VL__UNITTEST__UNITTEST">
      <document name="function PrintMessage" file="VL__UNITTEST__UNITTEST__PRINTMESSAGE@VOID(__VL__WSTRING_CONST_&amp;,"/>
      <document name="function RunAndDisposeTests" file="VL__UNITTEST__UNITTEST__RUNANDDISPOSETESTS@INT(INT,_WCHAR_T____)"/>
    </document>
  </namespace>
</reference>
