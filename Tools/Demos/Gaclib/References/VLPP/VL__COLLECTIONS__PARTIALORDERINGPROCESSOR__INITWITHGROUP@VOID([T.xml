<Document accessor="public" category="Function" name="InitWithGroup" declFile="PartialOrdering.h" declId="FB$vl::collections::PartialOrderingProcessor::InitWithGroup@void([TList] const &amp;, ::vl::collections::PartialOrderingProcessor::GroupOf&lt;[TList]&gt; const &amp;)[impl0]"><summary>Set data for sorting, by providing a list for objects, and a group for their relationship.</summary><typeparam name="TList">Type of the list for objects. <symbol name="Array" docId="vl::collections::Array" declFile="List.h" declId="NI$vl::collections::Array"/>, <symbol name="List" docId="vl::collections::List" declFile="List.h" declId="NI$vl::collections::List"/> or <symbol name="SortedList" docId="vl::collections::SortedList" declFile="List.h" declId="NI$vl::collections::SortedList"/> are recommended.</typeparam><param name="items">List of objects for sorting.</param><param name="depGroup">Relationship of objects for sorting in <symbol name="Group" docId="vl::collections::Group" declFile="Dictionary.h" declId="NI$vl::collections::Group"/>. Both keys and values are elements in &quot;items&quot;. To say that a depends on b, do depGroup.Add(a, b).</param><example index="0"/><signature><![CDATA[template <
    typename TList
>
void InitWithGroup(
    TList const & items,
    GroupOf<TList> const & depGroup
);
]]></signature><seealsos><symbol name="GroupOf" declFile="PartialOrdering.h" declId="NI$vl::collections::PartialOrderingProcessor::GroupOf"/></seealsos></Document>