<Document symbolId="vl::function_lambda::Lambda@::vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;2::Type([T])" accessor="" category="Function" name="Lambda" declFile="Function.h" declId="FB$vl::function_lambda::Lambda@::vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;2::Type([T])[impl0]"><summary>Create a functor in <symbol name="Func" declFile="Function.h" declId="NF[0]$vl::Func"/> from another functor, with all type arguments autotimatically inferred. The &quot;LAMBDA&quot; macro is recommended for the same purpose for writing compact code.</summary><typeparam name="T">Type of the functor to copy.</typeparam><returns>A copied functor in <symbol name="Func" declFile="Function.h" declId="NF[0]$vl::Func"/>.</returns><param name="functionObject">The functor to copy.</param><signature><![CDATA[template <
    typename T
>
LambdaRetriveType<decltype(expr)>::Type Lambda(
    T functionObject
);
]]></signature><seealsos><symbol name="Type" declFile="Function.h" declId="NI$vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;2::Type"/><symbol name="Type" declFile="Function.h" declId="NI$vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;::Type"/></seealsos></Document>