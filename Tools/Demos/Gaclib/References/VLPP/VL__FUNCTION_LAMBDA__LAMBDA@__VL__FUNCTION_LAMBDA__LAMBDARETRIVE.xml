<Document symbolId="vl::function_lambda::Lambda@::vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;::Type([T])" accessor="" category="Function" name="Lambda" declFile="Function.h" declId="FB$vl::function_lambda::Lambda@::vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;::Type([T])[impl0]"><summary>Create a function reference to a function object or a lambda expression, with all type information autotimatically inferred. You can use the macro called &quot;LAMBDA&quot; to refer to this function.</summary><typeparam name="T">Type of the function object or the lambda expression.</typeparam><returns>The function reference.</returns><param name="functionObject">The function object or the lambda expression.</param><signature><![CDATA[template <
    typename T
>
LambdaRetriveType<decltype(expr)>::Type Lambda(
    T functionObject
);
]]></signature><seealsos><symbol name="Type" declFile="Function.h" declId="NI$vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;2::Type"/><symbol name="Type" declFile="Function.h" declId="NI$vl::function_lambda::LambdaRetriveType@&lt;[R]([TArgs]...) ([TObject] ::) *&gt;::Type"/></seealsos></Document>