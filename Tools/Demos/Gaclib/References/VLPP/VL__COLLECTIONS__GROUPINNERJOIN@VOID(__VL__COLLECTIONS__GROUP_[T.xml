<Document symbolId="vl::collections::GroupInnerJoin@void(::vl::collections::Group&lt;[TKey], [TValueFirst]&gt; const &amp;, ::vl::collections::Group&lt;[TKey], [TValueSecond]&gt; const &amp;, [TDiscardFirst] const &amp;, [TDiscardSecond] const &amp;, [TAccept] const &amp;)" accessor="" category="Function" name="GroupInnerJoin" declFile="Dictionary.h" declId="FB$vl::collections::GroupInnerJoin@void(::vl::collections::Group&lt;[TKey], [TValueFirst]&gt; const &amp;, ::vl::collections::Group&lt;[TKey], [TValueSecond]&gt; const &amp;, [TDiscardFirst] const &amp;, [TDiscardSecond] const &amp;, [TAccept] const &amp;)[impl0]"><summary>Perform inner join on two groups.</summary><typeparam name="TKey">The type of keys in two groups.</typeparam><typeparam name="TValueFirst">The type of values in the first group.</typeparam><typeparam name="TValueSecond">The type of values in the second group.</typeparam><typeparam name="TDiscardFirst">The type of the first callback.</typeparam><typeparam name="TDiscardSecond">The type of the second callback.</typeparam><typeparam name="TAccept">The type of the third callback.</typeparam><param name="first">The first group.</param><param name="second">The second group.</param><param name="discardFirst">
 Callback that is called when a value in the first group is discarded.
 This happens for values associated to a key in the first group, that no value is assocated to the same key in the second group.
 The first argument is the key, the second argument is the discarded value list in the first group.
 </param><param name="discardSecond">
 Callback that is called when a value in the second group is discarded.
 This happens for values associated to a key in the second group, that no value is assocated to the same key in the first group.
 The first argument is the key, the second argument is the discarded value list in the first group.
 </param><param name="accept">
 Callback that is called when a match of values in both groups are found.
 This happens for any key that, values are associated to this key in both group.
 The first argument is the key, the second argument is the associated value list in the first group, the third argument list is the associated value in the second group.
 </param><remarks>
 This function does not change data in provided groups.
 </remarks><example index="0"/><signature><![CDATA[template <
    typename TKey, 
    typename TValueFirst, 
    typename TValueSecond, 
    typename TDiscardFirst, 
    typename TDiscardSecond, 
    typename TAccept
>
void GroupInnerJoin(
    Group<TKey, TValueFirst> const & first,
    Group<TKey, TValueSecond> const & second,
    TDiscardFirst const & discardFirst,
    TDiscardSecond const & discardSecond,
    TAccept const & accept
);
]]></signature><seealsos><symbol name="Group" docId="vl::collections::Group" declFile="Dictionary.h" declId="NI$vl::collections::Group"/></seealsos></Document>