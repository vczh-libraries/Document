<Document symbolId="vl::unittest::UnitTest" accessor="" category="Class" name="UnitTest"><summary><![CDATA[
 A static class containing all unit test operations.
 1) Writing test cases:
   TEST_FILE
   {
     TEST_CATEGORY(L"Category Description"){ ... });
     TEST_CASE(L"Test Case Description"){ ... });
   }
   A category could contains other categories and cases, but a case should only contain assertions.
 2) Writing asserts:
   TEST_CASE_ASSERT(condition): An assertion that is also a test case, only legal to call inside a category, with a description equivalents to the condition.
   TEST_ASSERT(condition); Only legal to call inside a case. It passes when condition evaluates to true.
   TEST_ERROR(condition); Only legal to call inside a case. It passes when condition throws vl::Error
   TEST_EXCEPTION(statement, exception, callback); Only legal to call inside a case. It passes when an exception of the expected type is thrown, and callback(exception) passes.
 3) Other functions
   TEST_PRINT(message); Print neutral message.
 4)
   You should call ]]><symbol docId="vl::unittest::UnitTest::RunAndDisposeTests@int(int, wchar_t * *)" declFile="UnitTest.h" declId="FB$vl::unittest::UnitTest::RunAndDisposeTests@int(int, wchar_t * *)[decl0]"/><![CDATA[ in your main function to run all test cases, and return the value from this function.
   When "/D" is provided, the test program crashes at any failed assertiong.
   When "/R" is provided, the test program consumes all failed assertions and run all cases. A test case stopped at the first failed assertion. Exit code will be 1 when any case fails.
   When no argument is provided
     In Windows, it becomes "/D" only when a debugger is attached, in other cases it becomes "/R".
     In other platforms, it becomes "/R"
 ]]></summary><signature><![CDATA[class UnitTest;
]]></signature></Document>