<Document accessor="" category="Class" name="Regex" declFile="Regex.h" declId="NI$vl::regex::Regex"><summary><p>
     Regular Expression. Here is a brief description of the regular expression grammar.
 </p><p><ul><li><b>Charset</b>:
             <ul><li><b>a</b>, <b>[a-z]</b>, <b>[^a-z]</b></li></ul></li><li><b>Functional characters</b>:
             <ul><li><b>^</b>: the beginning of the input (DFA incompatible)</li><li><b>$</b>: the end of the input (DFA incompatible)</li><li><b>regex1|regex2</b>: match either regex1 or regex2</li></ul></li><li><b>Escaping</b> (both \ and / mean the next character is escaped):
             <ul><li>
                     Escaped characters:
                     <ul><li><b>\r</b>: the CR character</li><li><b>\n</b>: the LF character</li><li><b>\t</b>: the tab character</li><li><b>\s</b>: spacing characters (including space, \r, \n, \t)</li><li><b>\S</b>: non-spacing characters</li><li><b>\d</b>: [0-9]</li><li><b>\D</b>: [^0-9]</li><li><b>\l</b>: [a-zA-Z]</li><li><b>\L</b>: [^a-zA-Z]</li><li><b>\w</b>: [a-zA-Z0-9_]</li><li><b>\W</b>: [^a-zA-Z0-9_]</li><li><b>\.</b>: any character (this is the main different from other regex, which treat &quot;.&quot; as any characters and &quot;\.&quot; as the dot character)</li><li><b>\\</b>, <b>\/</b>, <b>\(</b>, <b>\)</b>, <b>\+</b>, <b>\*</b>, <b>\?</b>, <b>\{</b>, <b>\}</b>, <b>\[</b>, <b>\]</b>, <b>\&lt;</b>, <b>\&gt;</b>, <b>\^</b>, <b>\$</b>, <b>\!</b>, <b>\=</b>: represents itself</li></ul></li><li>
                     Escaped characters in charset defined in a square bracket:
                     <ul><li><b>\r</b>: the CR character</li><li><b>\n</b>: the LF character</li><li><b>\t</b>: the tab character</li><li><b>\-</b>, <b>\[</b>, <b>\]</b>, <b>\\</b>, <b>\/</b>, <b>\^</b>, <b>\$</b>: represents itself</li></ul></li></ul></li><li><b>Loops</b>:
             <ul><li><b>regex{3}</b>: repeats 3 times</li><li><b>regex{3,}</b>: repeats 3 or more times</li><li><b>regex{1,3}</b>: repeats 1 to 3 times</li><li><b>regex?</b>: repeats 0 or 1 times</li><li><b>regex*</b>: repeats 0 or more times</li><li><b>regex+</b>: repeats 1 or more times</li></ul>
             if you add an additional <b>?</b> right after a loop, it means repeating as less as possible <b>(DFA incompatible)</b></li><li><b>Capturing</b>: <b>(DFA incompatible)</b><ul><li><b>(regex)</b>: No capturing, just change the operators&apos; association</li><li><b>(?regex)</b>: Capture matched fragment</li><li><b>(&lt;name&gt;regex)</b>: Capture matched fragment in a named group called &quot;name&quot;</li><li><b>(&lt;$i&gt;)</b>: Match the i-th captured fragment, begins from 0</li><li><b>(&lt;$name;i&gt;)</b>: Match the i-th captured fragment in the named group called &quot;name&quot;, begins from 0</li><li><b>(&lt;$name&gt;)</b>: Match any captured fragment in the named group called &quot;name&quot;</li></ul></li><li><b>MISC</b><ul><li><b>(=regex)</b>: The prefix of the following text should match the regex, but it is not counted in the whole match <b>(DFA incompatible)</b></li><li><b>(!regex)</b>: Any prefix of the following text should not match the regex, and it is not counted in the whole match <b>(DFA incompatible)</b></li><li><b>(&lt;#name&gt;regex)</b>: Name the regex &quot;name&quot;, and it applies here</li><li><b>(&lt;&amp;name&gt;)</b>: Copy the named regex &quot;name&quot; here and apply</li></ul></li></ul></p><p>
     The regular expression has pupre mode and rich mode.
     Pure mode means the regular expression is driven by a DFA, while the rich mode is not.
 </p><p>
     The regular expression can test a string instead of matching.
     Testing only returns a bool very indicating success or failure.
 </p></summary><signature><![CDATA[class Regex
    : Object
    , NotCopyable;
]]></signature><basetypes><symbol name="NotCopyable" docId="vl::NotCopyable" declFile="Basic.h" declId="NI$vl::NotCopyable"/><symbol name="Object" docId="vl::Object" declFile="Basic.h" declId="NI$vl::Object"/></basetypes></Document>