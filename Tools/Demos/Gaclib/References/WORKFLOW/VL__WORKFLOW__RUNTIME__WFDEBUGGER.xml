<Document accessor="" category="Class" name="WfDebugger"><summary>Workflow debugger.</summary><remarks><p><symbol name="SetDebuggerForCurrentThread" docId="vl::workflow::runtime::SetDebuggerForCurrentThread@void(::vl::Ptr&lt;::vl::workflow::runtime::WfDebugger&gt;)"/> needs to be called to make a debugger works for any Workflow script that is running in the current thread.
 </p><p><symbol name="OnBlockExecution" docId="vl::workflow::runtime::WfDebugger::OnBlockExecution@void()"/> needs to be overrided to make a debugger work properly.
 When the target Workflow script stops,
 this function will be called.
 In this function,
 one of <symbol name="Run" docId="vl::workflow::runtime::WfDebugger::Run@bool()"/>, <symbol name="Pause" docId="vl::workflow::runtime::WfDebugger::Pause@bool()"/>, <symbol name="Stop" docId="vl::workflow::runtime::WfDebugger::Stop@bool()"/>, <symbol name="StepOver" docId="vl::workflow::runtime::WfDebugger::StepOver@bool(bool)"/> and <symbol name="StepInto" docId="vl::workflow::runtime::WfDebugger::StepInto@bool(bool)"/>
 must be called to make the target Workflow script continues.
 </p><p>
 You are allowed to run the debugger logic in another thread,
 for example,
 an GUI application is debugging a Workflow script which is running in another thread.
 In this case, <symbol name="OnBlockExecution" docId="vl::workflow::runtime::WfDebugger::OnBlockExecution@void()"/> needs to be blocked until it is ready to continue.
 </p><p>
 Locks are a good choice for this.
 </p></remarks><signature><![CDATA[class WfDebugger
    : Object
    , IWfDebuggerCallback;
]]></signature><basetypes><symbol name="Object" docId="vl::Object"/><symbol name="IWfDebuggerCallback"/></basetypes></Document>