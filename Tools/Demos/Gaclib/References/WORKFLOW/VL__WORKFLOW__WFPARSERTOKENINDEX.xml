<Document accessor="" category="Enum" name="WfParserTokenIndex" declFile="WfExpression_Ast.h" declId="NI$vl::workflow::WfParserTokenIndex"><summary>Token types. Values of enum items will be used in <symbol name="token" docId="vl::regex::RegexToken::token" declFile="Regex.h" declId="NI$vl::regex::RegexToken::token"/>.</summary><enumitem name="ADD">Token ADD: /+</enumitem><enumitem name="ASSIGN">Token ASSIGN: /=</enumitem><enumitem name="AT">Token AT: @</enumitem><enumitem name="CLOSE_ARRAY">Token CLOSE_ARRAY: /]</enumitem><enumitem name="CLOSE_BRACE">Token CLOSE_BRACE: /}</enumitem><enumitem name="CLOSE_BRACKET">Token CLOSE_BRACKET: /)</enumitem><enumitem name="COLON">Token COLON: :</enumitem><enumitem name="COMMA">Token COMMA: ,</enumitem><enumitem name="COMMENT">Discardable token COMMENT: ///*([^*]|/*+[^//])*/*+//</enumitem><enumitem name="COROUTINE_COROUTINE">Token COROUTINE_COROUTINE: /$coroutine</enumitem><enumitem name="COROUTINE_INTERFACE">Token COROUTINE_INTERFACE: /$interface</enumitem><enumitem name="COROUTINE_OPERATOR">Token COROUTINE_OPERATOR: /$[A-Z]/w*</enumitem><enumitem name="COROUTINE_PAUSE">Token COROUTINE_PAUSE: /$pause</enumitem><enumitem name="COROUTINE_SIGN">Token COROUTINE_SIGN: /$</enumitem><enumitem name="DIV">Token DIV: //</enumitem><enumitem name="DOT">Token DOT: .</enumitem><enumitem name="EQ">Token EQ: /=/=</enumitem><enumitem name="EXP">Token EXP: /^</enumitem><enumitem name="FAILED_THEN">Token FAILED_THEN: /?/?</enumitem><enumitem name="FLOAT">Token FLOAT: /d+./d+</enumitem><enumitem name="FORMATSTRING">Token FORMATSTRING: /$(&apos;([^&apos;\\]|\\\.)*&apos;|&quot;([^&quot;\\]|\\\.)*&quot;)</enumitem><enumitem name="GE">Token GE: /&gt;/=</enumitem><enumitem name="GT">Token GT: /&gt;</enumitem><enumitem name="INTEGER">Token INTEGER: /d+</enumitem><enumitem name="INTERSECTION">Token INTERSECTION: /|</enumitem><enumitem name="JOIN">Token JOIN: &amp;</enumitem><enumitem name="KEYWORD_AND">Token KEYWORD_AND: and</enumitem><enumitem name="KEYWORD_AS">Token KEYWORD_AS: as</enumitem><enumitem name="KEYWORD_ATTACH">Token KEYWORD_ATTACH: attach</enumitem><enumitem name="KEYWORD_BIND">Token KEYWORD_BIND: bind</enumitem><enumitem name="KEYWORD_BREAK">Token KEYWORD_BREAK: break</enumitem><enumitem name="KEYWORD_CASE">Token KEYWORD_CASE: case</enumitem><enumitem name="KEYWORD_CAST">Token KEYWORD_CAST: cast</enumitem><enumitem name="KEYWORD_CATCH">Token KEYWORD_CATCH: catch</enumitem><enumitem name="KEYWORD_CLASS">Token KEYWORD_CLASS: class</enumitem><enumitem name="KEYWORD_CONST">Token KEYWORD_CONST: const</enumitem><enumitem name="KEYWORD_CONTINUE">Token KEYWORD_CONTINUE: continue</enumitem><enumitem name="KEYWORD_DEFAULT">Token KEYWORD_DEFAULT: default</enumitem><enumitem name="KEYWORD_DELETE">Token KEYWORD_DELETE: delete</enumitem><enumitem name="KEYWORD_DETACH">Token KEYWORD_DETACH: detach</enumitem><enumitem name="KEYWORD_ELSE">Token KEYWORD_ELSE: else</enumitem><enumitem name="KEYWORD_ENUM">Token KEYWORD_ENUM: enum</enumitem><enumitem name="KEYWORD_EVENT">Token KEYWORD_EVENT: event</enumitem><enumitem name="KEYWORD_FALSE">Token KEYWORD_FALSE: false</enumitem><enumitem name="KEYWORD_FINALLY">Token KEYWORD_FINALLY: finally</enumitem><enumitem name="KEYWORD_FLAGENUM">Token KEYWORD_FLAGENUM: flagenum</enumitem><enumitem name="KEYWORD_FOR">Token KEYWORD_FOR: for</enumitem><enumitem name="KEYWORD_FUNC">Token KEYWORD_FUNC: func</enumitem><enumitem name="KEYWORD_GOTO">Token KEYWORD_GOTO: goto</enumitem><enumitem name="KEYWORD_IF">Token KEYWORD_IF: if</enumitem><enumitem name="KEYWORD_IN">Token KEYWORD_IN: in</enumitem><enumitem name="KEYWORD_IS">Token KEYWORD_IS: is</enumitem><enumitem name="KEYWORD_LET">Token KEYWORD_LET: let</enumitem><enumitem name="KEYWORD_MODULE">Token KEYWORD_MODULE: module</enumitem><enumitem name="KEYWORD_NAMESPACE">Token KEYWORD_NAMESPACE: namespace</enumitem><enumitem name="KEYWORD_NEW">Token KEYWORD_NEW: new</enumitem><enumitem name="KEYWORD_NOT">Token KEYWORD_NOT: not</enumitem><enumitem name="KEYWORD_NULL">Token KEYWORD_NULL: null</enumitem><enumitem name="KEYWORD_OBSERVE">Token KEYWORD_OBSERVE: observe</enumitem><enumitem name="KEYWORD_OF">Token KEYWORD_OF: of</enumitem><enumitem name="KEYWORD_ON">Token KEYWORD_ON: on</enumitem><enumitem name="KEYWORD_OR">Token KEYWORD_OR: or</enumitem><enumitem name="KEYWORD_OVERRIDE">Token KEYWORD_OVERRIDE: override</enumitem><enumitem name="KEYWORD_PROP">Token KEYWORD_PROP: prop</enumitem><enumitem name="KEYWORD_RAISE">Token KEYWORD_RAISE: raise</enumitem><enumitem name="KEYWORD_RANGE">Token KEYWORD_RANGE: range</enumitem><enumitem name="KEYWORD_RETURN">Token KEYWORD_RETURN: return</enumitem><enumitem name="KEYWORD_REVERSED">Token KEYWORD_REVERSED: reversed</enumitem><enumitem name="KEYWORD_SHL">Token KEYWORD_SHL: shl</enumitem><enumitem name="KEYWORD_SHR">Token KEYWORD_SHR: shr</enumitem><enumitem name="KEYWORD_STATIC">Token KEYWORD_STATIC: static</enumitem><enumitem name="KEYWORD_STRUCT">Token KEYWORD_STRUCT: struct</enumitem><enumitem name="KEYWORD_SWITCH">Token KEYWORD_SWITCH: switch</enumitem><enumitem name="KEYWORD_THIS">Token KEYWORD_THIS: this</enumitem><enumitem name="KEYWORD_TRUE">Token KEYWORD_TRUE: true</enumitem><enumitem name="KEYWORD_TRY">Token KEYWORD_TRY: try</enumitem><enumitem name="KEYWORD_TYPE">Token KEYWORD_TYPE: type</enumitem><enumitem name="KEYWORD_TYPEOF">Token KEYWORD_TYPEOF: typeof</enumitem><enumitem name="KEYWORD_UNIT">Token KEYWORD_UNIT: unit</enumitem><enumitem name="KEYWORD_USING">Token KEYWORD_USING: using</enumitem><enumitem name="KEYWORD_VAR">Token KEYWORD_VAR: var</enumitem><enumitem name="KEYWORD_WHILE">Token KEYWORD_WHILE: while</enumitem><enumitem name="KEYWORD_XOR">Token KEYWORD_XOR: xor</enumitem><enumitem name="LE">Token LE: /&lt;/=</enumitem><enumitem name="LT">Token LT: /&lt;</enumitem><enumitem name="MOD">Token MOD: %</enumitem><enumitem name="MUL">Token MUL: /*</enumitem><enumitem name="NAME">Token NAME: [a-zA-Z_]/w*</enumitem><enumitem name="NE">Token NE: /!/=</enumitem><enumitem name="OPEN_ARRAY">Token OPEN_ARRAY: /[</enumitem><enumitem name="OPEN_BRACE">Token OPEN_BRACE: /{</enumitem><enumitem name="OPEN_BRACKET">Token OPEN_BRACKET: /(</enumitem><enumitem name="ORDERED_NAME">Token ORDERED_NAME: /$[0-9]*</enumitem><enumitem name="QUESTION_MARK">Token QUESTION_MARK: /?</enumitem><enumitem name="SCOPE_DELIMITER">Token SCOPE_DELIMITER: ::</enumitem><enumitem name="SEMICOLON">Token SEMICOLON: ;</enumitem><enumitem name="SPACE">Discardable token SPACE: /s+</enumitem><enumitem name="STATE_DECL">Token STATE_DECL: /$state</enumitem><enumitem name="STATE_GOTO">Token STATE_GOTO: /$goto_state</enumitem><enumitem name="STATE_INPUT">Token STATE_INPUT: /$state_input</enumitem><enumitem name="STATE_MACHINE">Token STATE_MACHINE: /$state_machine</enumitem><enumitem name="STATE_PUSH">Token STATE_PUSH: /$push_state</enumitem><enumitem name="STATE_SWITCH">Token STATE_SWITCH: /$switch</enumitem><enumitem name="STRING">Token STRING: &apos;([^&apos;\\]|\\\.)*&apos;|&quot;([^&quot;\\]|\\\.)*&quot;</enumitem><enumitem name="SUB">Token SUB: -</enumitem><enumitem name="TYPE_BOOL">Token TYPE_BOOL: bool</enumitem><enumitem name="TYPE_CHAR">Token TYPE_CHAR: char</enumitem><enumitem name="TYPE_DOUBLE">Token TYPE_DOUBLE: double</enumitem><enumitem name="TYPE_FLOAT">Token TYPE_FLOAT: float</enumitem><enumitem name="TYPE_INT">Token TYPE_INT: int</enumitem><enumitem name="TYPE_INTERFACE">Token TYPE_INTERFACE: interface</enumitem><enumitem name="TYPE_OBJECT">Token TYPE_OBJECT: object</enumitem><enumitem name="TYPE_STRING">Token TYPE_STRING: string</enumitem><enumitem name="TYPE_UINT">Token TYPE_UINT: uint</enumitem><enumitem name="TYPE_VOID">Token TYPE_VOID: void</enumitem><signature><![CDATA[enum class WfParserTokenIndex
{
    EXP,
    ADD,
    SUB,
    MUL,
    DIV,
    MOD,
    JOIN,
    INTERSECTION,
    LE,
    GE,
    LT,
    GT,
    EQ,
    NE,
    ASSIGN,
    FAILED_THEN,
    QUESTION_MARK,
    SCOPE_DELIMITER,
    COLON,
    SEMICOLON,
    COMMA,
    DOT,
    OPEN_ARRAY,
    CLOSE_ARRAY,
    OPEN_BRACE,
    CLOSE_BRACE,
    OPEN_BRACKET,
    CLOSE_BRACKET,
    AT,
    TYPE_VOID,
    TYPE_OBJECT,
    TYPE_INTERFACE,
    TYPE_INT,
    TYPE_UINT,
    TYPE_FLOAT,
    TYPE_DOUBLE,
    TYPE_STRING,
    TYPE_CHAR,
    TYPE_BOOL,
    KEYWORD_CONST,
    KEYWORD_SHL,
    KEYWORD_SHR,
    KEYWORD_XOR,
    KEYWORD_AND,
    KEYWORD_OR,
    KEYWORD_NOT,
    KEYWORD_NULL,
    KEYWORD_THIS,
    KEYWORD_TRUE,
    KEYWORD_FALSE,
    KEYWORD_LET,
    KEYWORD_IN,
    KEYWORD_RANGE,
    KEYWORD_NEW,
    KEYWORD_OF,
    KEYWORD_AS,
    KEYWORD_IS,
    KEYWORD_CAST,
    KEYWORD_FUNC,
    KEYWORD_TYPEOF,
    KEYWORD_TYPE,
    KEYWORD_BIND,
    KEYWORD_OBSERVE,
    KEYWORD_ON,
    KEYWORD_ATTACH,
    KEYWORD_DETACH,
    KEYWORD_GOTO,
    KEYWORD_VAR,
    KEYWORD_BREAK,
    KEYWORD_CONTINUE,
    KEYWORD_RETURN,
    KEYWORD_DELETE,
    KEYWORD_RAISE,
    KEYWORD_IF,
    KEYWORD_ELSE,
    KEYWORD_SWITCH,
    KEYWORD_CASE,
    KEYWORD_DEFAULT,
    KEYWORD_WHILE,
    KEYWORD_FOR,
    KEYWORD_REVERSED,
    KEYWORD_TRY,
    KEYWORD_CATCH,
    KEYWORD_FINALLY,
    KEYWORD_CLASS,
    KEYWORD_ENUM,
    KEYWORD_FLAGENUM,
    KEYWORD_STRUCT,
    KEYWORD_PROP,
    KEYWORD_EVENT,
    KEYWORD_STATIC,
    KEYWORD_OVERRIDE,
    KEYWORD_USING,
    KEYWORD_NAMESPACE,
    KEYWORD_MODULE,
    KEYWORD_UNIT,
    STATE_MACHINE,
    STATE_INPUT,
    STATE_SWITCH,
    STATE_GOTO,
    STATE_PUSH,
    STATE_DECL,
    COROUTINE_COROUTINE,
    COROUTINE_PAUSE,
    COROUTINE_INTERFACE,
    COROUTINE_OPERATOR,
    COROUTINE_SIGN,
    NAME,
    ORDERED_NAME,
    FLOAT,
    INTEGER,
    STRING,
    FORMATSTRING,
    SPACE,
    COMMENT,
};
]]></signature></Document>