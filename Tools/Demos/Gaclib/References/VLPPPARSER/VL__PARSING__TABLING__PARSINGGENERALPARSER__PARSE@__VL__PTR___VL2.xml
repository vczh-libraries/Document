<Document symbolId="vl::parsing::tabling::ParsingGeneralParser::Parse@::vl::Ptr&lt;::vl::parsing::ParsingTreeNode&gt;(::vl::WString const &amp;, ::vl::WString const &amp;, ::vl::collections::List&lt;::vl::Ptr&lt;::vl::parsing::ParsingError&gt;&gt; &amp;, ::vl::vint)" accessor="public" category="Function" name="Parse"><summary>Parse an input and get an abstract syntax tree if no error happens or all errors are recovered.</summary><returns>The abstract syntax tree.</returns><param name="input">The input to parse.</param><param name="rule">The name of the rule that used to parse the input.</param><param name="errors">Returns all errors.</param><param name="codeIndex">The code index to differentiate each input. This value will be stored in every tokens and abstract syntax nodes.</param><signature><![CDATA[Ptr<ParsingTreeNode> Parse(
    WString const & input,
    WString const & rule,
    collections::List<Ptr<ParsingError>> & errors,
    vint codeIndex /* optional */
);
]]></signature><seealsos><symbol docId="vl::vint" declFile="Basic.h" declId="NI$vl::vint"/><symbol docId="vl::Ptr" declFile="Pointer.h" declId="NI$vl::Ptr"/><symbol docId="vl::WString" declFile="String.h" declId="NI$vl::WString"/><symbol docId="vl::collections::List" declFile="List.h" declId="NI$vl::collections::List"/><symbol docId="vl::parsing::ParsingTreeNode" declFile="ParsingTree.h" declId="NI$vl::parsing::ParsingTreeNode"/><symbol docId="vl::parsing::ParsingError" declFile="ParsingTree.h" declId="NI$vl::parsing::ParsingError"/></seealsos></Document>