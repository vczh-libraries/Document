<Document symbolId="vl::reflection::description::UnboxParameter@void(::vl::reflection::description::Value const &amp;, [T] &amp;, ::vl::reflection::description::ITypeDescriptor *, ::vl::WString const &amp;)" accessor="" category="Function" name="UnboxParameter" declFile="GuiTypeDescriptorBuilder.h" declId="FB$vl::reflection::description::UnboxParameter@void(::vl::reflection::description::Value const &amp;, [T] &amp;, ::vl::reflection::description::ITypeDescriptor *, ::vl::WString const &amp;)[impl0]"><summary>Box an reflectable object. It supports generic types such as containers, functions (should be Func&lt;T&gt;), etc.</summary><typeparam name="T">Type of the object.</typeparam><param name="value">The value to unbox.</param><param name="result">The unboxed object.</param><param name="typeDescriptor">The type descriptor of the object (optional).</param><param name="valueName">The name of the object to provide a friendly exception message if the conversion is failed (optional).</param><signature><![CDATA[template <
    typename T
>
void UnboxParameter(
    Value const & value,
    T & result,
    ITypeDescriptor * typeDescriptor /* optional */,
    WString const & valueName /* optional */
);
]]></signature><seealsos><symbol name="WString" docId="vl::WString" declFile="String.h" declId="NI$vl::WString"/><symbol name="ITypeDescriptor" declFile="GuiTypeDescriptor.h" declId="NI$vl::reflection::description::ITypeDescriptor"/><symbol name="Value" docId="vl::reflection::description::Value" declFile="GuiTypeDescriptor.h" declId="NI$vl::reflection::description::Value"/></seealsos></Document>