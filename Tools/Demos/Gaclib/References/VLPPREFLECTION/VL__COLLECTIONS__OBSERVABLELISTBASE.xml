<Document accessor="" category="Class" name="ObservableListBase"><summary>Base type of observable container which triggers callbacks whenever items are changed.</summary><typeparam name="T">Type of elements.</typeparam><typeparam name="K">Type of the key type of elements. It is recommended to use the default value.</typeparam><remarks><p>Methods are the same to <symbol name="List" docId="vl::collections::List"/>, except that operator[] is readonly.</p><p>
 When an item is being inserted to the list,
 <b>QueryInsert</b> will be called to determine if this item can be inserted,
 <b>BeforeInsert</b> will be called before inserting,
 <b>AfterInsert</b> will be called after inserting.
 </p><p>
 When an item is being removed from the list,
 <b>QueryRemove</b> will be called to determine if this item can be removed,
 <b>BeforeRemove</b> will be called before removing,
 <b>AfterRemove</b> will be called after removing.
 </p><p>
 When an item is being replaced, it is considered as removing the original item and inserting the new item.
 </p><p>
 After any changing happens, <b>NotifyUpdateInternal</b> is called.
 Arguments is exactly the same as <symbol name="ItemChanged" docId="vl::reflection::description::IValueObservableList::ItemChanged"/>.
 </p></remarks><signature><![CDATA[template <
    typename T, 
    typename K /* optional */
>
class ObservableListBase
    : Object
    , collections::IEnumerable<T>;
]]></signature><basetypes><symbol name="Object" docId="vl::Object"/><symbol name="IEnumerable" docId="vl::collections::IEnumerable"/></basetypes></Document>