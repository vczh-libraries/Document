<example><![CDATA[
 // reflectable C++ types
 
 namespace mynamespace
 {
     class MyClass : public Object, public Description<MyClass>
     {
     public:
         MyClass()
             :data(L"Hello, world!")
         {
         }
 
         MyClass(const WString& _data)
             :data(_data)
         {
         }
 
         WString data;
     };
 }
 
 #define MY_TYPELIST(F)\
     F(mynamespace::MyClass)\
 
 // it is recommended to put the content below in a separated header file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             MY_TYPELIST(DECL_TYPE_INFO)
         }
     }
 }
 
 // it is recommended to put the content below in a separated cpp file
 
 namespace vl
 {
     namespace reflection
     {
         namespace description
         {
             using namespace mynamespace;
 
 #define _ ,
 
             MY_TYPELIST(IMPL_CPP_TYPE_INFO)
 
             BEGIN_CLASS_MEMBER(MyClass)
                 CLASS_MEMBER_CONSTRUCTOR(Ptr<MyClass>(), NO_PARAMETER)
                 CLASS_MEMBER_CONSTRUCTOR(Ptr<MyClass>(const WString&), { L"data" })
             END_CLASS_MEMBER(MyClass)
 
 #undef  _
         }
     }
 }
 
 class MyTypeLoader : public Object, public ITypeLoader
 {
 public:
     void Load(ITypeManager* manager)
     {
         MY_TYPELIST(ADD_TYPE_INFO)
     }
 
     void Unload(ITypeManager* manager)
     {
     }
 };
 
 // main function
 
 int main()
 {
     LoadPredefinedTypes();
     GetGlobalTypeManager()->AddTypeLoader(new MyTypeLoader);
     GetGlobalTypeManager()->Load();
     {
         auto myClass = Value::Create(GetTypeDescriptor(L"mynamespace::MyClass"), (Value_xs(), WString(L"Hello, world!!!")));
 
         auto ptrMyClass1 = UnboxValue<Ptr<MyClass>>(myClass);
         Console::WriteLine(ptrMyClass1->data);
 
         Ptr<MyClass> ptrMyClass2;
         UnboxParameter(myClass, ptrMyClass2);
         Console::WriteLine(ptrMyClass2->data);
     }
     DestroyGlobalTypeManager();
 }
 ]]></example>